/**
 */
package blockchain.provider;

import blockchain.util.BlockchainAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class BlockchainItemProviderAdapterFactory extends BlockchainAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public BlockchainItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link blockchain.Aplicacion} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AplicacionItemProvider aplicacionItemProvider;

	/**
	 * This creates an adapter for a {@link blockchain.Aplicacion}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAplicacionAdapter() {
		if (aplicacionItemProvider == null) {
			aplicacionItemProvider = new AplicacionItemProvider(this);
		}

		return aplicacionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link blockchain.Entidad} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EntidadItemProvider entidadItemProvider;

	/**
	 * This creates an adapter for a {@link blockchain.Entidad}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEntidadAdapter() {
		if (entidadItemProvider == null) {
			entidadItemProvider = new EntidadItemProvider(this);
		}

		return entidadItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link blockchain.Atributo} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AtributoItemProvider atributoItemProvider;

	/**
	 * This creates an adapter for a {@link blockchain.Atributo}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAtributoAdapter() {
		if (atributoItemProvider == null) {
			atributoItemProvider = new AtributoItemProvider(this);
		}

		return atributoItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link blockchain.SmartContract} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SmartContractItemProvider smartContractItemProvider;

	/**
	 * This creates an adapter for a {@link blockchain.SmartContract}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSmartContractAdapter() {
		if (smartContractItemProvider == null) {
			smartContractItemProvider = new SmartContractItemProvider(this);
		}

		return smartContractItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link blockchain.Operacion} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OperacionItemProvider operacionItemProvider;

	/**
	 * This creates an adapter for a {@link blockchain.Operacion}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOperacionAdapter() {
		if (operacionItemProvider == null) {
			operacionItemProvider = new OperacionItemProvider(this);
		}

		return operacionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link blockchain.Parametro} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ParametroItemProvider parametroItemProvider;

	/**
	 * This creates an adapter for a {@link blockchain.Parametro}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createParametroAdapter() {
		if (parametroItemProvider == null) {
			parametroItemProvider = new ParametroItemProvider(this);
		}

		return parametroItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link blockchain.Estado} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EstadoItemProvider estadoItemProvider;

	/**
	 * This creates an adapter for a {@link blockchain.Estado}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEstadoAdapter() {
		if (estadoItemProvider == null) {
			estadoItemProvider = new EstadoItemProvider(this);
		}

		return estadoItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link blockchain.ExpresionLogica} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExpresionLogicaItemProvider expresionLogicaItemProvider;

	/**
	 * This creates an adapter for a {@link blockchain.ExpresionLogica}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExpresionLogicaAdapter() {
		if (expresionLogicaItemProvider == null) {
			expresionLogicaItemProvider = new ExpresionLogicaItemProvider(this);
		}

		return expresionLogicaItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link blockchain.Primitivo} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PrimitivoItemProvider primitivoItemProvider;

	/**
	 * This creates an adapter for a {@link blockchain.Primitivo}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPrimitivoAdapter() {
		if (primitivoItemProvider == null) {
			primitivoItemProvider = new PrimitivoItemProvider(this);
		}

		return primitivoItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link blockchain.ExpresionAritmetica} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExpresionAritmeticaItemProvider expresionAritmeticaItemProvider;

	/**
	 * This creates an adapter for a {@link blockchain.ExpresionAritmetica}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExpresionAritmeticaAdapter() {
		if (expresionAritmeticaItemProvider == null) {
			expresionAritmeticaItemProvider = new ExpresionAritmeticaItemProvider(this);
		}

		return expresionAritmeticaItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link blockchain.Variable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VariableItemProvider variableItemProvider;

	/**
	 * This creates an adapter for a {@link blockchain.Variable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVariableAdapter() {
		if (variableItemProvider == null) {
			variableItemProvider = new VariableItemProvider(this);
		}

		return variableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link blockchain.Mapa} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MapaItemProvider mapaItemProvider;

	/**
	 * This creates an adapter for a {@link blockchain.Mapa}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMapaAdapter() {
		if (mapaItemProvider == null) {
			mapaItemProvider = new MapaItemProvider(this);
		}

		return mapaItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link blockchain.Condicional} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CondicionalItemProvider condicionalItemProvider;

	/**
	 * This creates an adapter for a {@link blockchain.Condicional}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCondicionalAdapter() {
		if (condicionalItemProvider == null) {
			condicionalItemProvider = new CondicionalItemProvider(this);
		}

		return condicionalItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link blockchain.ExpresionNumerica} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExpresionNumericaItemProvider expresionNumericaItemProvider;

	/**
	 * This creates an adapter for a {@link blockchain.ExpresionNumerica}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExpresionNumericaAdapter() {
		if (expresionNumericaItemProvider == null) {
			expresionNumericaItemProvider = new ExpresionNumericaItemProvider(this);
		}

		return expresionNumericaItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link blockchain.ExpresionTexto} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExpresionTextoItemProvider expresionTextoItemProvider;

	/**
	 * This creates an adapter for a {@link blockchain.ExpresionTexto}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExpresionTextoAdapter() {
		if (expresionTextoItemProvider == null) {
			expresionTextoItemProvider = new ExpresionTextoItemProvider(this);
		}

		return expresionTextoItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link blockchain.ExpresionBoolean} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExpresionBooleanItemProvider expresionBooleanItemProvider;

	/**
	 * This creates an adapter for a {@link blockchain.ExpresionBoolean}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExpresionBooleanAdapter() {
		if (expresionBooleanItemProvider == null) {
			expresionBooleanItemProvider = new ExpresionBooleanItemProvider(this);
		}

		return expresionBooleanItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link blockchain.ExpresionReferenciada} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExpresionReferenciadaItemProvider expresionReferenciadaItemProvider;

	/**
	 * This creates an adapter for a {@link blockchain.ExpresionReferenciada}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExpresionReferenciadaAdapter() {
		if (expresionReferenciadaItemProvider == null) {
			expresionReferenciadaItemProvider = new ExpresionReferenciadaItemProvider(this);
		}

		return expresionReferenciadaItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link blockchain.ExpresionRelacional} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExpresionRelacionalItemProvider expresionRelacionalItemProvider;

	/**
	 * This creates an adapter for a {@link blockchain.ExpresionRelacional}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExpresionRelacionalAdapter() {
		if (expresionRelacionalItemProvider == null) {
			expresionRelacionalItemProvider = new ExpresionRelacionalItemProvider(this);
		}

		return expresionRelacionalItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (aplicacionItemProvider != null) aplicacionItemProvider.dispose();
		if (entidadItemProvider != null) entidadItemProvider.dispose();
		if (atributoItemProvider != null) atributoItemProvider.dispose();
		if (smartContractItemProvider != null) smartContractItemProvider.dispose();
		if (operacionItemProvider != null) operacionItemProvider.dispose();
		if (parametroItemProvider != null) parametroItemProvider.dispose();
		if (estadoItemProvider != null) estadoItemProvider.dispose();
		if (expresionLogicaItemProvider != null) expresionLogicaItemProvider.dispose();
		if (primitivoItemProvider != null) primitivoItemProvider.dispose();
		if (expresionAritmeticaItemProvider != null) expresionAritmeticaItemProvider.dispose();
		if (variableItemProvider != null) variableItemProvider.dispose();
		if (mapaItemProvider != null) mapaItemProvider.dispose();
		if (condicionalItemProvider != null) condicionalItemProvider.dispose();
		if (expresionNumericaItemProvider != null) expresionNumericaItemProvider.dispose();
		if (expresionTextoItemProvider != null) expresionTextoItemProvider.dispose();
		if (expresionBooleanItemProvider != null) expresionBooleanItemProvider.dispose();
		if (expresionReferenciadaItemProvider != null) expresionReferenciadaItemProvider.dispose();
		if (expresionRelacionalItemProvider != null) expresionRelacionalItemProvider.dispose();
	}

}
