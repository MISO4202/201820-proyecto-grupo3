// Llamado de los métodos de verificación
"Aplicación".println();
"Smart contracts únicos: ".print();
Aplicacion.all.first.smartContractsUnicos().println();
"No hay datos repetidos: ".print();
Aplicacion.all.first.noHayTiposDeDatosRepetidos().println();
for(smartContract in SmartContract.all)
{
	smartContract.name.println();
	"Estados únicos: ".print();
	smartContract.estadosUnicos().println();
	"Entidades únicas: ".print();
	smartContract.entidadesUnicas().println();
	"Operaciones únicas: ".print();
	smartContract.operacionesUnicas().println();
}
for(entidad in Entidad.all)
{
	entidad.name.println();
	"Atributos únicos: ".print();
	entidad.atributosUnicos().println();
}
for(operacion in Operacion.all)
{
	operacion.name.println();
	"Parámetros únicos: ".print();
	operacion.parametrosUnicos().println();
	"Variables únicas: ".print();
	operacion.variablesUnicas().println();
	"No tiene sentencias si es definida por el usuario: ".print();
	operacion.esDefinidaPorUsuarioYNoTieneSentencias().println();
}

// La aplicación no puede tener tipos de datos  repetidos
operation Aplicacion noHayTiposDeDatosRepetidos() : Boolean
{
	return self.tipodato.select(tipo | tipo.isKindOf(Primitivo)).size() == 
	self.tipodato.select(tipo | tipo.isKindOf(Primitivo)).tipo.asSet().size();
} 
// Si un condicional tiene 2 o más expresiones lógicas, estas tienen que ir divididas por un OR o un AND . Ejemplo : a==b And c>4
// Se soluciona con que un condicional solo pueda tener una expresión

// Una operación user define = true  no puede tener sentencias adentro 
operation Operacion esDefinidaPorUsuarioYNoTieneSentencias() : Boolean
{
	return (not self.esUserDefined) or self.sentencia.size() == 0;
}
// Los smart contracts no se repiten
operation Aplicacion smartContractsUnicos() : Boolean
{
	return self.smartcontract.size() == self.smartcontract.name.asSet().size();
}
// Los estados de un smart contract no se repiten
operation SmartContract estadosUnicos() : Boolean
{
	return self.estado.size() == self.estado.name.asSet().size();
}
// Las entidades de un smart contract no se repiten
operation SmartContract entidadesUnicas() : Boolean
{
	return self.entidades.size() == self.entidades.name.asSet().size();
}
// Las operaciones de un smart contract no se repiten
operation SmartContract operacionesUnicas() : Boolean
{
	return self.operaciones.size() == self.operaciones.name.asSet().size();
}
// Los atributos de una entidad no se repiten
operation Entidad atributosUnicos() : Boolean
{
	return self.atributos.size() == self.atributos.name.asSet().size();
}
// Los parámetros de una operación no se repiten
operation Operacion parametrosUnicos() : Boolean
{
	return self.parametros.size() == self.parametros.name.asSet().size();
}
// Las variables de una operación no se repiten
operation Operacion variablesUnicas() : Boolean
{
	return self.sentencia.select(s | s.isKindOf(Variable)).size() 
		== 
		self.sentencia.select(s | s.isKindOf(Variable)).name.asSet().size();
}