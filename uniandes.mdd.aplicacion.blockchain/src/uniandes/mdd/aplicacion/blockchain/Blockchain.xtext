// automatically generated by Xtext
grammar uniandes.mdd.aplicacion.blockchain.Blockchain with org.eclipse.xtext.common.Terminals

import "http://www.example.org/blockchain" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Aplicacion returns Aplicacion:
	{Aplicacion}
	'Aplicacion'
	name=EString
	'{'
		(smartcontract+=SmartContract)+
		('TipoDato' tipodato+=TipoDato ( "," tipodato+=TipoDato)*)*
	'}';


TipoDato returns TipoDato:
	Entidad | Primitivo | Mapa;

Sentencia returns Sentencia:
	Parametro | Estado | ExpresionLogica | ExpresionAritmetica | Variable | Condicional | ExpresionNumerica | EString | EBoolean | ExpresionReferenciada | ExpresionRelacional;
	
SmartContract returns SmartContract:
	'SmartContract'
	name=EString
	'{'
		(entidades+=Entidad (entidades+=Entidad)*)*
		(estado+=Estado ( "," estado+=Estado)*)*
		(operaciones+=Operacion ( "," operaciones+=Operacion)*)*
		  
	'}';

EString returns ecore::EString:
	STRING | ID;

Entidad returns Entidad:
	{Entidad}
	'Entidad'
	name=EString
	'{'
		(atributos+=Atributo (atributos+=Atributo)* )*
	'}';

Operacion returns Operacion:
	{Operacion}
	'Operacion'
	('isUd='esUserDefined?=EBoolean)+
	name=EString
	'('
	(parametros+=Parametro ( "," parametros+=Parametro)*)?
	')'
	(':' retorno=[TipoDato|EString])?
	'{'
		('return')?(sentencia+=Sentencia (sentencia+=Sentencia)*)?
	'}';

Estado returns Estado:
	'Estado'
	tipodato=[TipoDato|ID]
	name=EString
	;

Atributo returns Atributo:
	
	tipodato=[TipoDato|EString]
	name=EString
	;

Parametro returns Parametro:
	
	tipodato=[TipoDato|EString]
	name=EString
	;
	
EBoolean returns ecore::EBoolean:
	'true' | 'false';

ExpresionLogica returns ExpresionLogica:
	'ExpLog'
	('(')?
	('id' id=EInt)?
	ladoIzq=[Sentencia|EString]
	(operador=OperadorLogico)+
	ladoDer=[Sentencia|EString]
	(')')?
	;

ExpresionAritmetica returns ExpresionAritmetica:
		{ExpresionAritmetica}
		('id' id=EInt)?
		ladoIzq=[Sentencia|EString]
		(operador=Operador)+	
		ladoDer=[Sentencia|EString]
	;

Variable returns Variable:
	{Variable}
	tipodato=[TipoDato|EString]
	'var' 
	name=EString 
		
	;

Condicional returns Condicional:
	'Condicional'
	'{'
		('tipoCondicional' tipoCondicional=TipoCondicion)?
		'expresionlogica' expresionlogica=ExpresionLogica
		'sentencias' '{' sentencias+=Sentencia ( "," sentencias+=Sentencia)* '}' 
		('else' '{' else+=Condicional ( "," else+=Condicional)* '}' )?
	'}';

ExpresionNumerica returns ExpresionNumerica:
	{ExpresionNumerica}
	'ExpNum'
	(value=EDouble)?
	;

ExpresionTexto returns ExpresionTexto:
	{ExpresionTexto}
	'ExpText'
	'{'
		('value' value=EString)?
	'}';

ExpresionBoolean returns ExpresionBoolean:
	{ExpresionBoolean}
	(value?='value')?
	'ExpBool'
	;

ExpresionReferenciada returns ExpresionReferenciada:
	{ExpresionReferenciada}
	'ExpRef'
	('id' id=EInt)?
	(entReferenciada=[Entidad|EString])?
	(atrReferenciado=[Atributo|EString])?
	;

ExpresionRelacional returns ExpresionRelacional:
	'ExpRel'
	'{'
		('id' id=EInt)?
		ladoIzq=[Sentencia|EString]
		(operadorRelacional=OperadorRelacion)?
		ladoDer=[Sentencia|EString]
	'}';

EInt returns ecore::EInt:
	'-'? INT;

enum OperadorLogico returns OperadorLogico:
				IGUAL_IGUAL = '==' | DIFERENTE = '!=' | MAYORQUE = '>' | MENORQUE = '<' | MAYORIGUAL = '>=' | MENORIGUAL = '<=' | AND = '&&' | OR = '||';

enum Operador returns Operador:
				MAS = '+' | MENOS = '-' | PRODUCTO = '*' | DIVISION = '/' | IGUAL = '=' | GET = 'GET' | DELETE = 'DELETE';

enum TipoCondicion returns TipoCondicion:
				IF = 'if' | ELSE = 'else';

EDouble returns ecore::EDouble:
	'-'? INT? '.' INT (('E'|'e') '-'? INT)?;

enum OperadorRelacion returns OperadorRelacion:
				PUNTO = '.';

Primitivo returns Primitivo:
	{Primitivo}
	(tipo=DatoPrimitivo)+
	name=EString
	;

Mapa returns Mapa:
	name=EString
	':''Map'
	'<'
	tipoDatoKey=[TipoDato|EString]
	',' tipoDatoValue=[TipoDato|EString]'>'
	;

enum DatoPrimitivo returns DatoPrimitivo:
				STRING = 'String' | NUMERICO = 'Numerico' | BOOLEAN = 'Boolean';
			
				

