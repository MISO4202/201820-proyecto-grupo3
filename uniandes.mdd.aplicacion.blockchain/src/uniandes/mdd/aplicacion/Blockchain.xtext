// automatically generated by Xtext
grammar uniandes.mdd.aplicacion.blockchain.Blockchain with org.eclipse.xtext.common.Terminals

import "http://www.example.org/blockchain" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Aplicacion returns Aplicacion:
	{Aplicacion}
	'Aplicacion'
	name=EString
	'{'
		(smartcontract+=SmartContract (smartcontract+=SmartContract)*)?
		('tipodato'(tipodato+=TipoDato))*
	'}';


TipoDato returns TipoDato:
	Entidad | Primitivo | Mapa;

Linea returns Linea:
	Expresion | Variable | Condicional | Retorno;

Expresion returns Expresion:
	ExpresionLogica | ExpresionAritmetica | ExpresionNumerica | ExpresionTexto | ExpresionBoolean| ExpresionReferenciada | ExpresionRelacional;



NamedElement returns NamedElement:
	Atributo | Parametro | Estado | Variable;

SmartContract returns SmartContract:
	'SmartContract'
	name=EString
	'{'
		(entidades+=Entidad (entidades+=Entidad)*)?
		(estado+=Estado (estado+=Estado)*)?
		(operaciones+=Operacion (operaciones+=Operacion)*)?
		  
	'}';

EString returns ecore::EString:
	STRING | ID;

Entidad returns Entidad:
	{Entidad}
	'Entidad'
	name=EString
	'{'
		(atributos+=Atributo (atributos+=Atributo)* )?
	'}';


Operacion returns Operacion:
	//{Operacion}
	'Operacion'
	('isUd='esUserDefined?=EBoolean)?
	name=EString
	'('
	(parametros+=Parametro ( "," parametros+=Parametro)*)?
	')'
	(':' retorno=[TipoDato|EString])?
	'{'
		('(')* lineas+=Linea* (')')*
	'}';

Estado returns Estado:
	'Estado'
	tipodato=[TipoDato|EString]
	name=EString
	;

Atributo returns Atributo:
	
	tipodato=[TipoDato|EString]
	('isId='(isId=EBoolean))?
	name=EString
	;

Parametro returns Parametro:
	
	tipodato=[TipoDato|EString]
	name=EString
	;

EBoolean returns ecore::EBoolean:
	'true' | 'false';


ExpresionLogica returns ExpresionLogica:
	'ExpLog'
	('(')* izq=Expresion (')')*
	(operador=OperadorLogico)?
	('(')* der=Expresion (')')*
	
	;

ExpresionAritmetica returns ExpresionAritmetica:
	{ExpresionAritmetica}
	'ExpArit'
	('(')* izq=Expresion (')')*
	(operador=Operador)?
	('(')* der=Expresion (')')*
	;

Variable returns Variable:
	'var'
		tipodato=[TipoDato|EString]
		(name=EString)?
	;

Condicional returns If:
		 'if'(expresionlogica=ExpresionLogica)?  
		 '{'
		 	lineas+=Linea*	
		 '}'
		 (elseLines = Else)?
	;

Else returns Else:
		 'else'
		 '{'
		 	lineas+=Linea*	
		 '}'
		;
	
ExpresionNumerica returns ExpresionNumerica:
	{ExpresionNumerica}
	'ExpNum'
	(value=EDouble)?
	;

ExpresionTexto returns ExpresionTexto:
	{ExpresionTexto}
	'ExpTex'
		(value=EString)?
	;

ExpresionBoolean returns ExpresionBoolean:
	{ExpresionBoolean}
	'ExpBool'
	(value?=EBoolean)?
	;

ExpresionReferenciada returns ExpresionReferenciada:
	'ExpRef'
	'{'
		('id' id=EInt)?
		referencia=[NamedElement|EString]
	'}'
	;

ExpresionRelacional returns ExpresionRelacional:
	'ExpRel'
		izq=Expresion
		(operadorRelacional=OperadorRelacion)?
		der=Expresion
	;

Retorno returns Retorno:

	'return'
	'{'
	(lineaRetorno+=Linea)*
	'}';

enum OperadorLogico returns OperadorLogico:
				IGUAL_IGUAL = '==' | DIFERENTE = '!=' | MAYORQUE = '>' | MENORQUE = '<' | MAYORIGUAL = '>=' | MENORIGUAL = '<=' | AND = '&&' | OR = '||';

enum Operador returns Operador:
				MAS = '+' | MENOS = '-' | PRODUCTO = '*' | DIVISION = '/' | IGUAL = '=' | GET = 'GET' | DELETE = 'DELETE' | PUT = 'PUT';

EDouble returns ecore::EDouble:
	'-'? INT? '.' INT (('E'|'e') '-'? INT)?;

EInt returns ecore::EInt:
	'-'? INT;

enum OperadorRelacion returns OperadorRelacion:
				PUNTO = '.';

Primitivo returns Primitivo:
	{Primitivo}
	(tipo=DatoPrimitivo)?	
	name=EString
	;


Mapa returns Mapa:
	'Map'
	'<'
	tipoDatoKey=[TipoDato|EString]
	',' tipoDatoValue=[TipoDato|EString]'>'
	':'
	name=EString
	;


enum DatoPrimitivo returns DatoPrimitivo:
				STRING = 'String' | NUMERICO = 'uint' | BOOLEAN = 'Boolean' | ADDRESS = 'address';