/*
 * generated by Xtext 2.12.0
 */
package uniandes.mdd.aplicacion.blockchain.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class BlockchainGrammarAccess extends AbstractGrammarElementFinder {
	
	public class AplicacionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uniandes.mdd.aplicacion.blockchain.Blockchain.Aplicacion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAplicacionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAplicacionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cSmartcontractAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cSmartcontractSmartContractParserRuleCall_4_0_0 = (RuleCall)cSmartcontractAssignment_4_0.eContents().get(0);
		private final Assignment cSmartcontractAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cSmartcontractSmartContractParserRuleCall_4_1_0 = (RuleCall)cSmartcontractAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cTipodatoKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cTipodatoAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cTipodatoTipoDatoParserRuleCall_5_1_0 = (RuleCall)cTipodatoAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Aplicacion:
		//	{Aplicacion}
		//	'Aplicacion'
		//	name=EString
		//	'{' (smartcontract+=SmartContract smartcontract+=SmartContract*)? ('tipodato' tipodato+=TipoDato)*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Aplicacion} 'Aplicacion' name=EString '{' (smartcontract+=SmartContract smartcontract+=SmartContract*)? ('tipodato'
		//tipodato+=TipoDato)* '}'
		public Group getGroup() { return cGroup; }
		
		//{Aplicacion}
		public Action getAplicacionAction_0() { return cAplicacionAction_0; }
		
		//'Aplicacion'
		public Keyword getAplicacionKeyword_1() { return cAplicacionKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//(smartcontract+=SmartContract smartcontract+=SmartContract*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//smartcontract+=SmartContract
		public Assignment getSmartcontractAssignment_4_0() { return cSmartcontractAssignment_4_0; }
		
		//SmartContract
		public RuleCall getSmartcontractSmartContractParserRuleCall_4_0_0() { return cSmartcontractSmartContractParserRuleCall_4_0_0; }
		
		//smartcontract+=SmartContract*
		public Assignment getSmartcontractAssignment_4_1() { return cSmartcontractAssignment_4_1; }
		
		//SmartContract
		public RuleCall getSmartcontractSmartContractParserRuleCall_4_1_0() { return cSmartcontractSmartContractParserRuleCall_4_1_0; }
		
		//('tipodato' tipodato+=TipoDato)*
		public Group getGroup_5() { return cGroup_5; }
		
		//'tipodato'
		public Keyword getTipodatoKeyword_5_0() { return cTipodatoKeyword_5_0; }
		
		//tipodato+=TipoDato
		public Assignment getTipodatoAssignment_5_1() { return cTipodatoAssignment_5_1; }
		
		//TipoDato
		public RuleCall getTipodatoTipoDatoParserRuleCall_5_1_0() { return cTipodatoTipoDatoParserRuleCall_5_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class TipoDatoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uniandes.mdd.aplicacion.blockchain.Blockchain.TipoDato");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEntidadParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPrimitivoParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cMapaParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//TipoDato:
		//	Entidad | Primitivo | Mapa;
		@Override public ParserRule getRule() { return rule; }
		
		//Entidad | Primitivo | Mapa
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Entidad
		public RuleCall getEntidadParserRuleCall_0() { return cEntidadParserRuleCall_0; }
		
		//Primitivo
		public RuleCall getPrimitivoParserRuleCall_1() { return cPrimitivoParserRuleCall_1; }
		
		//Mapa
		public RuleCall getMapaParserRuleCall_2() { return cMapaParserRuleCall_2; }
	}
	public class LineaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uniandes.mdd.aplicacion.blockchain.Blockchain.Linea");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExpresionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVariableParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCondicionalParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cRetornoParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Linea:
		//	Expresion | Variable | Condicional | Retorno;
		@Override public ParserRule getRule() { return rule; }
		
		//Expresion | Variable | Condicional | Retorno
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Expresion
		public RuleCall getExpresionParserRuleCall_0() { return cExpresionParserRuleCall_0; }
		
		//Variable
		public RuleCall getVariableParserRuleCall_1() { return cVariableParserRuleCall_1; }
		
		//Condicional
		public RuleCall getCondicionalParserRuleCall_2() { return cCondicionalParserRuleCall_2; }
		
		//Retorno
		public RuleCall getRetornoParserRuleCall_3() { return cRetornoParserRuleCall_3; }
	}
	public class ExpresionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uniandes.mdd.aplicacion.blockchain.Blockchain.Expresion");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExpresionLogicaParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExpresionAritmeticaParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cExpresionNumericaParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cExpresionTextoParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cExpresionBooleanParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cExpresionReferenciadaParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cExpresionRelacionalParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//Expresion:
		//	ExpresionLogica | ExpresionAritmetica | ExpresionNumerica | ExpresionTexto | ExpresionBoolean | ExpresionReferenciada
		//	| ExpresionRelacional;
		@Override public ParserRule getRule() { return rule; }
		
		//ExpresionLogica | ExpresionAritmetica | ExpresionNumerica | ExpresionTexto | ExpresionBoolean | ExpresionReferenciada |
		//ExpresionRelacional
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ExpresionLogica
		public RuleCall getExpresionLogicaParserRuleCall_0() { return cExpresionLogicaParserRuleCall_0; }
		
		//ExpresionAritmetica
		public RuleCall getExpresionAritmeticaParserRuleCall_1() { return cExpresionAritmeticaParserRuleCall_1; }
		
		//ExpresionNumerica
		public RuleCall getExpresionNumericaParserRuleCall_2() { return cExpresionNumericaParserRuleCall_2; }
		
		//ExpresionTexto
		public RuleCall getExpresionTextoParserRuleCall_3() { return cExpresionTextoParserRuleCall_3; }
		
		//ExpresionBoolean
		public RuleCall getExpresionBooleanParserRuleCall_4() { return cExpresionBooleanParserRuleCall_4; }
		
		//ExpresionReferenciada
		public RuleCall getExpresionReferenciadaParserRuleCall_5() { return cExpresionReferenciadaParserRuleCall_5; }
		
		//ExpresionRelacional
		public RuleCall getExpresionRelacionalParserRuleCall_6() { return cExpresionRelacionalParserRuleCall_6; }
	}
	public class NamedElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uniandes.mdd.aplicacion.blockchain.Blockchain.NamedElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAtributoParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cParametroParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cEstadoParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cVariableParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//NamedElement:
		//	Atributo | Parametro | Estado | Variable;
		@Override public ParserRule getRule() { return rule; }
		
		//Atributo | Parametro | Estado | Variable
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Atributo
		public RuleCall getAtributoParserRuleCall_0() { return cAtributoParserRuleCall_0; }
		
		//Parametro
		public RuleCall getParametroParserRuleCall_1() { return cParametroParserRuleCall_1; }
		
		//Estado
		public RuleCall getEstadoParserRuleCall_2() { return cEstadoParserRuleCall_2; }
		
		//Variable
		public RuleCall getVariableParserRuleCall_3() { return cVariableParserRuleCall_3; }
	}
	public class SmartContractElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uniandes.mdd.aplicacion.blockchain.Blockchain.SmartContract");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSmartContractKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cEntidadesAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cEntidadesEntidadParserRuleCall_3_0_0 = (RuleCall)cEntidadesAssignment_3_0.eContents().get(0);
		private final Assignment cEntidadesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cEntidadesEntidadParserRuleCall_3_1_0 = (RuleCall)cEntidadesAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cEstadoAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cEstadoEstadoParserRuleCall_4_0_0 = (RuleCall)cEstadoAssignment_4_0.eContents().get(0);
		private final Assignment cEstadoAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cEstadoEstadoParserRuleCall_4_1_0 = (RuleCall)cEstadoAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cOperacionesAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cOperacionesOperacionParserRuleCall_5_0_0 = (RuleCall)cOperacionesAssignment_5_0.eContents().get(0);
		private final Assignment cOperacionesAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cOperacionesOperacionParserRuleCall_5_1_0 = (RuleCall)cOperacionesAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//SmartContract:
		//	'SmartContract'
		//	name=EString
		//	'{' (entidades+=Entidad entidades+=Entidad*)? (estado+=Estado estado+=Estado*)? (operaciones+=Operacion
		//	operaciones+=Operacion*)?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'SmartContract' name=EString '{' (entidades+=Entidad entidades+=Entidad*)? (estado+=Estado estado+=Estado*)?
		//(operaciones+=Operacion operaciones+=Operacion*)? '}'
		public Group getGroup() { return cGroup; }
		
		//'SmartContract'
		public Keyword getSmartContractKeyword_0() { return cSmartContractKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(entidades+=Entidad entidades+=Entidad*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//entidades+=Entidad
		public Assignment getEntidadesAssignment_3_0() { return cEntidadesAssignment_3_0; }
		
		//Entidad
		public RuleCall getEntidadesEntidadParserRuleCall_3_0_0() { return cEntidadesEntidadParserRuleCall_3_0_0; }
		
		//entidades+=Entidad*
		public Assignment getEntidadesAssignment_3_1() { return cEntidadesAssignment_3_1; }
		
		//Entidad
		public RuleCall getEntidadesEntidadParserRuleCall_3_1_0() { return cEntidadesEntidadParserRuleCall_3_1_0; }
		
		//(estado+=Estado estado+=Estado*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//estado+=Estado
		public Assignment getEstadoAssignment_4_0() { return cEstadoAssignment_4_0; }
		
		//Estado
		public RuleCall getEstadoEstadoParserRuleCall_4_0_0() { return cEstadoEstadoParserRuleCall_4_0_0; }
		
		//estado+=Estado*
		public Assignment getEstadoAssignment_4_1() { return cEstadoAssignment_4_1; }
		
		//Estado
		public RuleCall getEstadoEstadoParserRuleCall_4_1_0() { return cEstadoEstadoParserRuleCall_4_1_0; }
		
		//(operaciones+=Operacion operaciones+=Operacion*)?
		public Group getGroup_5() { return cGroup_5; }
		
		//operaciones+=Operacion
		public Assignment getOperacionesAssignment_5_0() { return cOperacionesAssignment_5_0; }
		
		//Operacion
		public RuleCall getOperacionesOperacionParserRuleCall_5_0_0() { return cOperacionesOperacionParserRuleCall_5_0_0; }
		
		//operaciones+=Operacion*
		public Assignment getOperacionesAssignment_5_1() { return cOperacionesAssignment_5_1; }
		
		//Operacion
		public RuleCall getOperacionesOperacionParserRuleCall_5_1_0() { return cOperacionesOperacionParserRuleCall_5_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uniandes.mdd.aplicacion.blockchain.Blockchain.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString:
		//	STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class EntidadElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uniandes.mdd.aplicacion.blockchain.Blockchain.Entidad");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEntidadAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cEntidadKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cAtributosAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cAtributosAtributoParserRuleCall_4_0_0 = (RuleCall)cAtributosAssignment_4_0.eContents().get(0);
		private final Assignment cAtributosAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cAtributosAtributoParserRuleCall_4_1_0 = (RuleCall)cAtributosAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Entidad:
		//	{Entidad}
		//	'Entidad'
		//	name=EString
		//	'{' (atributos+=Atributo atributos+=Atributo*)?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Entidad} 'Entidad' name=EString '{' (atributos+=Atributo atributos+=Atributo*)? '}'
		public Group getGroup() { return cGroup; }
		
		//{Entidad}
		public Action getEntidadAction_0() { return cEntidadAction_0; }
		
		//'Entidad'
		public Keyword getEntidadKeyword_1() { return cEntidadKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//(atributos+=Atributo atributos+=Atributo*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//atributos+=Atributo
		public Assignment getAtributosAssignment_4_0() { return cAtributosAssignment_4_0; }
		
		//Atributo
		public RuleCall getAtributosAtributoParserRuleCall_4_0_0() { return cAtributosAtributoParserRuleCall_4_0_0; }
		
		//atributos+=Atributo*
		public Assignment getAtributosAssignment_4_1() { return cAtributosAssignment_4_1; }
		
		//Atributo
		public RuleCall getAtributosAtributoParserRuleCall_4_1_0() { return cAtributosAtributoParserRuleCall_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class OperacionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uniandes.mdd.aplicacion.blockchain.Blockchain.Operacion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOperacionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cIsUdKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cEsUserDefinedAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cEsUserDefinedEBooleanParserRuleCall_1_1_0 = (RuleCall)cEsUserDefinedAssignment_1_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cParametrosAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cParametrosParametroParserRuleCall_4_0_0 = (RuleCall)cParametrosAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cParametrosAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cParametrosParametroParserRuleCall_4_1_1_0 = (RuleCall)cParametrosAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cColonKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cRetornoAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final CrossReference cRetornoTipoDatoCrossReference_6_1_0 = (CrossReference)cRetornoAssignment_6_1.eContents().get(0);
		private final RuleCall cRetornoTipoDatoEStringParserRuleCall_6_1_0_1 = (RuleCall)cRetornoTipoDatoCrossReference_6_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cLeftParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cLineasAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cLineasLineaParserRuleCall_9_0 = (RuleCall)cLineasAssignment_9.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Keyword cRightCurlyBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		
		//Operacion: //{Operacion}
		//	'Operacion' ('isUd=' esUserDefined?=EBoolean)? name=EString '(' (parametros+=Parametro ("," parametros+=Parametro)*)?
		//	')' (':' retorno=[TipoDato|EString])? '{' '('* lineas+=Linea* ')'* '}';
		@Override public ParserRule getRule() { return rule; }
		
		////{Operacion}
		//'Operacion' ('isUd=' esUserDefined?=EBoolean)? name=EString '(' (parametros+=Parametro ("," parametros+=Parametro)*)?
		//')' (':' retorno=[TipoDato|EString])? '{' '('* lineas+=Linea* ')'* '}'
		public Group getGroup() { return cGroup; }
		
		////{Operacion}
		//'Operacion'
		public Keyword getOperacionKeyword_0() { return cOperacionKeyword_0; }
		
		//('isUd=' esUserDefined?=EBoolean)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'isUd='
		public Keyword getIsUdKeyword_1_0() { return cIsUdKeyword_1_0; }
		
		//esUserDefined?=EBoolean
		public Assignment getEsUserDefinedAssignment_1_1() { return cEsUserDefinedAssignment_1_1; }
		
		//EBoolean
		public RuleCall getEsUserDefinedEBooleanParserRuleCall_1_1_0() { return cEsUserDefinedEBooleanParserRuleCall_1_1_0; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//(parametros+=Parametro ("," parametros+=Parametro)*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//parametros+=Parametro
		public Assignment getParametrosAssignment_4_0() { return cParametrosAssignment_4_0; }
		
		//Parametro
		public RuleCall getParametrosParametroParserRuleCall_4_0_0() { return cParametrosParametroParserRuleCall_4_0_0; }
		
		//("," parametros+=Parametro)*
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//","
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }
		
		//parametros+=Parametro
		public Assignment getParametrosAssignment_4_1_1() { return cParametrosAssignment_4_1_1; }
		
		//Parametro
		public RuleCall getParametrosParametroParserRuleCall_4_1_1_0() { return cParametrosParametroParserRuleCall_4_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//(':' retorno=[TipoDato|EString])?
		public Group getGroup_6() { return cGroup_6; }
		
		//':'
		public Keyword getColonKeyword_6_0() { return cColonKeyword_6_0; }
		
		//retorno=[TipoDato|EString]
		public Assignment getRetornoAssignment_6_1() { return cRetornoAssignment_6_1; }
		
		//[TipoDato|EString]
		public CrossReference getRetornoTipoDatoCrossReference_6_1_0() { return cRetornoTipoDatoCrossReference_6_1_0; }
		
		//EString
		public RuleCall getRetornoTipoDatoEStringParserRuleCall_6_1_0_1() { return cRetornoTipoDatoEStringParserRuleCall_6_1_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_7() { return cLeftCurlyBracketKeyword_7; }
		
		//'('*
		public Keyword getLeftParenthesisKeyword_8() { return cLeftParenthesisKeyword_8; }
		
		//lineas+=Linea*
		public Assignment getLineasAssignment_9() { return cLineasAssignment_9; }
		
		//Linea
		public RuleCall getLineasLineaParserRuleCall_9_0() { return cLineasLineaParserRuleCall_9_0; }
		
		//')'*
		public Keyword getRightParenthesisKeyword_10() { return cRightParenthesisKeyword_10; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_11() { return cRightCurlyBracketKeyword_11; }
	}
	public class EstadoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uniandes.mdd.aplicacion.blockchain.Blockchain.Estado");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEstadoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTipodatoAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTipodatoTipoDatoCrossReference_1_0 = (CrossReference)cTipodatoAssignment_1.eContents().get(0);
		private final RuleCall cTipodatoTipoDatoEStringParserRuleCall_1_0_1 = (RuleCall)cTipodatoTipoDatoCrossReference_1_0.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//Estado:
		//	'Estado'
		//	tipodato=[TipoDato|EString] name=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//'Estado' tipodato=[TipoDato|EString] name=EString
		public Group getGroup() { return cGroup; }
		
		//'Estado'
		public Keyword getEstadoKeyword_0() { return cEstadoKeyword_0; }
		
		//tipodato=[TipoDato|EString]
		public Assignment getTipodatoAssignment_1() { return cTipodatoAssignment_1; }
		
		//[TipoDato|EString]
		public CrossReference getTipodatoTipoDatoCrossReference_1_0() { return cTipodatoTipoDatoCrossReference_1_0; }
		
		//EString
		public RuleCall getTipodatoTipoDatoEStringParserRuleCall_1_0_1() { return cTipodatoTipoDatoEStringParserRuleCall_1_0_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
	}
	public class AtributoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uniandes.mdd.aplicacion.blockchain.Blockchain.Atributo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTipodatoAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTipodatoTipoDatoCrossReference_0_0 = (CrossReference)cTipodatoAssignment_0.eContents().get(0);
		private final RuleCall cTipodatoTipoDatoEStringParserRuleCall_0_0_1 = (RuleCall)cTipodatoTipoDatoCrossReference_0_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Atributo:
		//	tipodato=[TipoDato|EString] name=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//tipodato=[TipoDato|EString] name=EString
		public Group getGroup() { return cGroup; }
		
		//tipodato=[TipoDato|EString]
		public Assignment getTipodatoAssignment_0() { return cTipodatoAssignment_0; }
		
		//[TipoDato|EString]
		public CrossReference getTipodatoTipoDatoCrossReference_0_0() { return cTipodatoTipoDatoCrossReference_0_0; }
		
		//EString
		public RuleCall getTipodatoTipoDatoEStringParserRuleCall_0_0_1() { return cTipodatoTipoDatoEStringParserRuleCall_0_0_1; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
	}
	public class ParametroElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uniandes.mdd.aplicacion.blockchain.Blockchain.Parametro");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTipodatoAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTipodatoTipoDatoCrossReference_0_0 = (CrossReference)cTipodatoAssignment_0.eContents().get(0);
		private final RuleCall cTipodatoTipoDatoEStringParserRuleCall_0_0_1 = (RuleCall)cTipodatoTipoDatoCrossReference_0_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Parametro:
		//	tipodato=[TipoDato|EString] name=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//tipodato=[TipoDato|EString] name=EString
		public Group getGroup() { return cGroup; }
		
		//tipodato=[TipoDato|EString]
		public Assignment getTipodatoAssignment_0() { return cTipodatoAssignment_0; }
		
		//[TipoDato|EString]
		public CrossReference getTipodatoTipoDatoCrossReference_0_0() { return cTipodatoTipoDatoCrossReference_0_0; }
		
		//EString
		public RuleCall getTipodatoTipoDatoEStringParserRuleCall_0_0_1() { return cTipodatoTipoDatoEStringParserRuleCall_0_0_1; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
	}
	public class EBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uniandes.mdd.aplicacion.blockchain.Blockchain.EBoolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//EBoolean ecore::EBoolean:
		//	'true' | 'false';
		@Override public ParserRule getRule() { return rule; }
		
		//'true' | 'false'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'true'
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }
		
		//'false'
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}
	public class ExpresionLogicaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uniandes.mdd.aplicacion.blockchain.Blockchain.ExpresionLogica");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExpLogKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIzqAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIzqExpresionParserRuleCall_2_0 = (RuleCall)cIzqAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cOperadorAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cOperadorOperadorLogicoEnumRuleCall_4_0 = (RuleCall)cOperadorAssignment_4.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cDerAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cDerExpresionParserRuleCall_6_0 = (RuleCall)cDerAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//ExpresionLogica:
		//	'ExpLog'
		//	'('* izq=Expresion ')'*
		//	operador=OperadorLogico?
		//	'('* der=Expresion ')'*;
		@Override public ParserRule getRule() { return rule; }
		
		//'ExpLog' '('* izq=Expresion ')'* operador=OperadorLogico? '('* der=Expresion ')'*
		public Group getGroup() { return cGroup; }
		
		//'ExpLog'
		public Keyword getExpLogKeyword_0() { return cExpLogKeyword_0; }
		
		//'('*
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//izq=Expresion
		public Assignment getIzqAssignment_2() { return cIzqAssignment_2; }
		
		//Expresion
		public RuleCall getIzqExpresionParserRuleCall_2_0() { return cIzqExpresionParserRuleCall_2_0; }
		
		//')'*
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//operador=OperadorLogico?
		public Assignment getOperadorAssignment_4() { return cOperadorAssignment_4; }
		
		//OperadorLogico
		public RuleCall getOperadorOperadorLogicoEnumRuleCall_4_0() { return cOperadorOperadorLogicoEnumRuleCall_4_0; }
		
		//'('*
		public Keyword getLeftParenthesisKeyword_5() { return cLeftParenthesisKeyword_5; }
		
		//der=Expresion
		public Assignment getDerAssignment_6() { return cDerAssignment_6; }
		
		//Expresion
		public RuleCall getDerExpresionParserRuleCall_6_0() { return cDerExpresionParserRuleCall_6_0; }
		
		//')'*
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}
	public class ExpresionAritmeticaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uniandes.mdd.aplicacion.blockchain.Blockchain.ExpresionAritmetica");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExpresionAritmeticaAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cExpAritKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cIzqAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIzqExpresionParserRuleCall_3_0 = (RuleCall)cIzqAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cOperadorAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cOperadorOperadorEnumRuleCall_5_0 = (RuleCall)cOperadorAssignment_5.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cDerAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cDerExpresionParserRuleCall_7_0 = (RuleCall)cDerAssignment_7.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//ExpresionAritmetica:
		//	{ExpresionAritmetica}
		//	'ExpArit'
		//	'('* izq=Expresion ')'*
		//	operador=Operador?
		//	'('* der=Expresion ')'*;
		@Override public ParserRule getRule() { return rule; }
		
		//{ExpresionAritmetica} 'ExpArit' '('* izq=Expresion ')'* operador=Operador? '('* der=Expresion ')'*
		public Group getGroup() { return cGroup; }
		
		//{ExpresionAritmetica}
		public Action getExpresionAritmeticaAction_0() { return cExpresionAritmeticaAction_0; }
		
		//'ExpArit'
		public Keyword getExpAritKeyword_1() { return cExpAritKeyword_1; }
		
		//'('*
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//izq=Expresion
		public Assignment getIzqAssignment_3() { return cIzqAssignment_3; }
		
		//Expresion
		public RuleCall getIzqExpresionParserRuleCall_3_0() { return cIzqExpresionParserRuleCall_3_0; }
		
		//')'*
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//operador=Operador?
		public Assignment getOperadorAssignment_5() { return cOperadorAssignment_5; }
		
		//Operador
		public RuleCall getOperadorOperadorEnumRuleCall_5_0() { return cOperadorOperadorEnumRuleCall_5_0; }
		
		//'('*
		public Keyword getLeftParenthesisKeyword_6() { return cLeftParenthesisKeyword_6; }
		
		//der=Expresion
		public Assignment getDerAssignment_7() { return cDerAssignment_7; }
		
		//Expresion
		public RuleCall getDerExpresionParserRuleCall_7_0() { return cDerExpresionParserRuleCall_7_0; }
		
		//')'*
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }
	}
	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uniandes.mdd.aplicacion.blockchain.Blockchain.Variable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTipodatoAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTipodatoTipoDatoCrossReference_1_0 = (CrossReference)cTipodatoAssignment_1.eContents().get(0);
		private final RuleCall cTipodatoTipoDatoEStringParserRuleCall_1_0_1 = (RuleCall)cTipodatoTipoDatoCrossReference_1_0.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//Variable:
		//	'var'
		//	tipodato=[TipoDato|EString] name=EString?;
		@Override public ParserRule getRule() { return rule; }
		
		//'var' tipodato=[TipoDato|EString] name=EString?
		public Group getGroup() { return cGroup; }
		
		//'var'
		public Keyword getVarKeyword_0() { return cVarKeyword_0; }
		
		//tipodato=[TipoDato|EString]
		public Assignment getTipodatoAssignment_1() { return cTipodatoAssignment_1; }
		
		//[TipoDato|EString]
		public CrossReference getTipodatoTipoDatoCrossReference_1_0() { return cTipodatoTipoDatoCrossReference_1_0; }
		
		//EString
		public RuleCall getTipodatoTipoDatoEStringParserRuleCall_1_0_1() { return cTipodatoTipoDatoEStringParserRuleCall_1_0_1; }
		
		//name=EString?
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
	}
	public class CondicionalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uniandes.mdd.aplicacion.blockchain.Blockchain.Condicional");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpresionlogicaAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpresionlogicaExpresionLogicaParserRuleCall_1_0 = (RuleCall)cExpresionlogicaAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLineasAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLineasLineaParserRuleCall_3_0 = (RuleCall)cLineasAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cElseLinesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cElseLinesElseParserRuleCall_5_0 = (RuleCall)cElseLinesAssignment_5.eContents().get(0);
		
		//Condicional If:
		//	'if' expresionlogica=ExpresionLogica?
		//	'{'
		//	lineas+=Linea*
		//	'}'
		//	elseLines=Else?;
		@Override public ParserRule getRule() { return rule; }
		
		//'if' expresionlogica=ExpresionLogica? '{' lineas+=Linea* '}' elseLines=Else?
		public Group getGroup() { return cGroup; }
		
		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//expresionlogica=ExpresionLogica?
		public Assignment getExpresionlogicaAssignment_1() { return cExpresionlogicaAssignment_1; }
		
		//ExpresionLogica
		public RuleCall getExpresionlogicaExpresionLogicaParserRuleCall_1_0() { return cExpresionlogicaExpresionLogicaParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//lineas+=Linea*
		public Assignment getLineasAssignment_3() { return cLineasAssignment_3; }
		
		//Linea
		public RuleCall getLineasLineaParserRuleCall_3_0() { return cLineasLineaParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
		
		//elseLines=Else?
		public Assignment getElseLinesAssignment_5() { return cElseLinesAssignment_5; }
		
		//Else
		public RuleCall getElseLinesElseParserRuleCall_5_0() { return cElseLinesElseParserRuleCall_5_0; }
	}
	public class ElseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uniandes.mdd.aplicacion.blockchain.Blockchain.Else");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cElseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLineasAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLineasLineaParserRuleCall_2_0 = (RuleCall)cLineasAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Else:
		//	'else'
		//	'{'
		//	lineas+=Linea*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'else' '{' lineas+=Linea* '}'
		public Group getGroup() { return cGroup; }
		
		//'else'
		public Keyword getElseKeyword_0() { return cElseKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//lineas+=Linea*
		public Assignment getLineasAssignment_2() { return cLineasAssignment_2; }
		
		//Linea
		public RuleCall getLineasLineaParserRuleCall_2_0() { return cLineasLineaParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class ExpresionNumericaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uniandes.mdd.aplicacion.blockchain.Blockchain.ExpresionNumerica");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExpresionNumericaAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cExpNumKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueEDoubleParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//ExpresionNumerica:
		//	{ExpresionNumerica}
		//	'ExpNum'
		//	value=EDouble?;
		@Override public ParserRule getRule() { return rule; }
		
		//{ExpresionNumerica} 'ExpNum' value=EDouble?
		public Group getGroup() { return cGroup; }
		
		//{ExpresionNumerica}
		public Action getExpresionNumericaAction_0() { return cExpresionNumericaAction_0; }
		
		//'ExpNum'
		public Keyword getExpNumKeyword_1() { return cExpNumKeyword_1; }
		
		//value=EDouble?
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//EDouble
		public RuleCall getValueEDoubleParserRuleCall_2_0() { return cValueEDoubleParserRuleCall_2_0; }
	}
	public class ExpresionTextoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uniandes.mdd.aplicacion.blockchain.Blockchain.ExpresionTexto");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExpresionTextoAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cExpTexKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueEStringParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//ExpresionTexto:
		//	{ExpresionTexto}
		//	'ExpTex'
		//	value=EString?;
		@Override public ParserRule getRule() { return rule; }
		
		//{ExpresionTexto} 'ExpTex' value=EString?
		public Group getGroup() { return cGroup; }
		
		//{ExpresionTexto}
		public Action getExpresionTextoAction_0() { return cExpresionTextoAction_0; }
		
		//'ExpTex'
		public Keyword getExpTexKeyword_1() { return cExpTexKeyword_1; }
		
		//value=EString?
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//EString
		public RuleCall getValueEStringParserRuleCall_2_0() { return cValueEStringParserRuleCall_2_0; }
	}
	public class ExpresionBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uniandes.mdd.aplicacion.blockchain.Blockchain.ExpresionBoolean");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExpresionBooleanAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cExpBoolKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueEBooleanParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//ExpresionBoolean:
		//	{ExpresionBoolean}
		//	'ExpBool'
		//	value?=EBoolean?;
		@Override public ParserRule getRule() { return rule; }
		
		//{ExpresionBoolean} 'ExpBool' value?=EBoolean?
		public Group getGroup() { return cGroup; }
		
		//{ExpresionBoolean}
		public Action getExpresionBooleanAction_0() { return cExpresionBooleanAction_0; }
		
		//'ExpBool'
		public Keyword getExpBoolKeyword_1() { return cExpBoolKeyword_1; }
		
		//value?=EBoolean?
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//EBoolean
		public RuleCall getValueEBooleanParserRuleCall_2_0() { return cValueEBooleanParserRuleCall_2_0; }
	}
	public class ExpresionReferenciadaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uniandes.mdd.aplicacion.blockchain.Blockchain.ExpresionReferenciada");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExpRefKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cIdKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cIdAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cIdEIntParserRuleCall_2_1_0 = (RuleCall)cIdAssignment_2_1.eContents().get(0);
		private final Assignment cReferenciaAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cReferenciaNamedElementCrossReference_3_0 = (CrossReference)cReferenciaAssignment_3.eContents().get(0);
		private final RuleCall cReferenciaNamedElementEStringParserRuleCall_3_0_1 = (RuleCall)cReferenciaNamedElementCrossReference_3_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ExpresionReferenciada:
		//	'ExpRef'
		//	'{' ('id' id=EInt)?
		//	referencia=[NamedElement|EString]
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'ExpRef' '{' ('id' id=EInt)? referencia=[NamedElement|EString] '}'
		public Group getGroup() { return cGroup; }
		
		//'ExpRef'
		public Keyword getExpRefKeyword_0() { return cExpRefKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//('id' id=EInt)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'id'
		public Keyword getIdKeyword_2_0() { return cIdKeyword_2_0; }
		
		//id=EInt
		public Assignment getIdAssignment_2_1() { return cIdAssignment_2_1; }
		
		//EInt
		public RuleCall getIdEIntParserRuleCall_2_1_0() { return cIdEIntParserRuleCall_2_1_0; }
		
		//referencia=[NamedElement|EString]
		public Assignment getReferenciaAssignment_3() { return cReferenciaAssignment_3; }
		
		//[NamedElement|EString]
		public CrossReference getReferenciaNamedElementCrossReference_3_0() { return cReferenciaNamedElementCrossReference_3_0; }
		
		//EString
		public RuleCall getReferenciaNamedElementEStringParserRuleCall_3_0_1() { return cReferenciaNamedElementEStringParserRuleCall_3_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ExpresionRelacionalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uniandes.mdd.aplicacion.blockchain.Blockchain.ExpresionRelacional");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExpRelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIzqAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIzqExpresionParserRuleCall_1_0 = (RuleCall)cIzqAssignment_1.eContents().get(0);
		private final Assignment cOperadorRelacionalAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOperadorRelacionalOperadorRelacionEnumRuleCall_2_0 = (RuleCall)cOperadorRelacionalAssignment_2.eContents().get(0);
		private final Assignment cDerAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDerExpresionParserRuleCall_3_0 = (RuleCall)cDerAssignment_3.eContents().get(0);
		
		//ExpresionRelacional:
		//	'ExpRel'
		//	izq=Expresion
		//	operadorRelacional=OperadorRelacion?
		//	der=Expresion;
		@Override public ParserRule getRule() { return rule; }
		
		//'ExpRel' izq=Expresion operadorRelacional=OperadorRelacion? der=Expresion
		public Group getGroup() { return cGroup; }
		
		//'ExpRel'
		public Keyword getExpRelKeyword_0() { return cExpRelKeyword_0; }
		
		//izq=Expresion
		public Assignment getIzqAssignment_1() { return cIzqAssignment_1; }
		
		//Expresion
		public RuleCall getIzqExpresionParserRuleCall_1_0() { return cIzqExpresionParserRuleCall_1_0; }
		
		//operadorRelacional=OperadorRelacion?
		public Assignment getOperadorRelacionalAssignment_2() { return cOperadorRelacionalAssignment_2; }
		
		//OperadorRelacion
		public RuleCall getOperadorRelacionalOperadorRelacionEnumRuleCall_2_0() { return cOperadorRelacionalOperadorRelacionEnumRuleCall_2_0; }
		
		//der=Expresion
		public Assignment getDerAssignment_3() { return cDerAssignment_3; }
		
		//Expresion
		public RuleCall getDerExpresionParserRuleCall_3_0() { return cDerExpresionParserRuleCall_3_0; }
	}
	public class RetornoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uniandes.mdd.aplicacion.blockchain.Blockchain.Retorno");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReturnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLineaRetornoAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLineaRetornoLineaParserRuleCall_2_0 = (RuleCall)cLineaRetornoAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Retorno:
		//	'return'
		//	'{'
		//	lineaRetorno+=Linea*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'return' '{' lineaRetorno+=Linea* '}'
		public Group getGroup() { return cGroup; }
		
		//'return'
		public Keyword getReturnKeyword_0() { return cReturnKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//lineaRetorno+=Linea*
		public Assignment getLineaRetornoAssignment_2() { return cLineaRetornoAssignment_2; }
		
		//Linea
		public RuleCall getLineaRetornoLineaParserRuleCall_2_0() { return cLineaRetornoLineaParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class EDoubleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uniandes.mdd.aplicacion.blockchain.Blockchain.EDouble");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_4_0 = (Alternatives)cGroup_4.eContents().get(0);
		private final Keyword cEKeyword_4_0_0 = (Keyword)cAlternatives_4_0.eContents().get(0);
		private final Keyword cEKeyword_4_0_1 = (Keyword)cAlternatives_4_0.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_4_2 = (RuleCall)cGroup_4.eContents().get(2);
		
		//EDouble ecore::EDouble:
		//	'-'? INT? '.' INT (('E' | 'e') '-'? INT)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT? '.' INT (('E' | 'e') '-'? INT)?
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT?
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
		
		//'.'
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_3() { return cINTTerminalRuleCall_3; }
		
		//(('E' | 'e') '-'? INT)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'E' | 'e'
		public Alternatives getAlternatives_4_0() { return cAlternatives_4_0; }
		
		//'E'
		public Keyword getEKeyword_4_0_0() { return cEKeyword_4_0_0; }
		
		//'e'
		public Keyword getEKeyword_4_0_1() { return cEKeyword_4_0_1; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_4_1() { return cHyphenMinusKeyword_4_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_4_2() { return cINTTerminalRuleCall_4_2; }
	}
	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uniandes.mdd.aplicacion.blockchain.Blockchain.EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EInt ecore::EInt:
		//	'-'? INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	public class PrimitivoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uniandes.mdd.aplicacion.blockchain.Blockchain.Primitivo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPrimitivoAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTipoAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTipoDatoPrimitivoEnumRuleCall_1_0 = (RuleCall)cTipoAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//Primitivo:
		//	{Primitivo} tipo=DatoPrimitivo?
		//	name=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//{Primitivo} tipo=DatoPrimitivo? name=EString
		public Group getGroup() { return cGroup; }
		
		//{Primitivo}
		public Action getPrimitivoAction_0() { return cPrimitivoAction_0; }
		
		//tipo=DatoPrimitivo?
		public Assignment getTipoAssignment_1() { return cTipoAssignment_1; }
		
		//DatoPrimitivo
		public RuleCall getTipoDatoPrimitivoEnumRuleCall_1_0() { return cTipoDatoPrimitivoEnumRuleCall_1_0; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
	}
	public class MapaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uniandes.mdd.aplicacion.blockchain.Blockchain.Mapa");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMapKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTipoDatoKeyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTipoDatoKeyTipoDatoCrossReference_2_0 = (CrossReference)cTipoDatoKeyAssignment_2.eContents().get(0);
		private final RuleCall cTipoDatoKeyTipoDatoEStringParserRuleCall_2_0_1 = (RuleCall)cTipoDatoKeyTipoDatoCrossReference_2_0.eContents().get(1);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTipoDatoValueAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cTipoDatoValueTipoDatoCrossReference_4_0 = (CrossReference)cTipoDatoValueAssignment_4.eContents().get(0);
		private final RuleCall cTipoDatoValueTipoDatoEStringParserRuleCall_4_0_1 = (RuleCall)cTipoDatoValueTipoDatoCrossReference_4_0.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cColonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cNameAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cNameEStringParserRuleCall_7_0 = (RuleCall)cNameAssignment_7.eContents().get(0);
		
		//Mapa:
		//	'Map'
		//	'<'
		//	tipoDatoKey=[TipoDato|EString]
		//	',' tipoDatoValue=[TipoDato|EString] '>'
		//	':'
		//	name=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//'Map' '<' tipoDatoKey=[TipoDato|EString] ',' tipoDatoValue=[TipoDato|EString] '>' ':' name=EString
		public Group getGroup() { return cGroup; }
		
		//'Map'
		public Keyword getMapKeyword_0() { return cMapKeyword_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1() { return cLessThanSignKeyword_1; }
		
		//tipoDatoKey=[TipoDato|EString]
		public Assignment getTipoDatoKeyAssignment_2() { return cTipoDatoKeyAssignment_2; }
		
		//[TipoDato|EString]
		public CrossReference getTipoDatoKeyTipoDatoCrossReference_2_0() { return cTipoDatoKeyTipoDatoCrossReference_2_0; }
		
		//EString
		public RuleCall getTipoDatoKeyTipoDatoEStringParserRuleCall_2_0_1() { return cTipoDatoKeyTipoDatoEStringParserRuleCall_2_0_1; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//tipoDatoValue=[TipoDato|EString]
		public Assignment getTipoDatoValueAssignment_4() { return cTipoDatoValueAssignment_4; }
		
		//[TipoDato|EString]
		public CrossReference getTipoDatoValueTipoDatoCrossReference_4_0() { return cTipoDatoValueTipoDatoCrossReference_4_0; }
		
		//EString
		public RuleCall getTipoDatoValueTipoDatoEStringParserRuleCall_4_0_1() { return cTipoDatoValueTipoDatoEStringParserRuleCall_4_0_1; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_5() { return cGreaterThanSignKeyword_5; }
		
		//':'
		public Keyword getColonKeyword_6() { return cColonKeyword_6; }
		
		//name=EString
		public Assignment getNameAssignment_7() { return cNameAssignment_7; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_7_0() { return cNameEStringParserRuleCall_7_0; }
	}
	
	public class OperadorLogicoElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "uniandes.mdd.aplicacion.blockchain.Blockchain.OperadorLogico");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cIGUAL_IGUALEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cIGUAL_IGUALEqualsSignEqualsSignKeyword_0_0 = (Keyword)cIGUAL_IGUALEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDIFERENTEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDIFERENTEExclamationMarkEqualsSignKeyword_1_0 = (Keyword)cDIFERENTEEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cMAYORQUEEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cMAYORQUEGreaterThanSignKeyword_2_0 = (Keyword)cMAYORQUEEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cMENORQUEEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cMENORQUELessThanSignKeyword_3_0 = (Keyword)cMENORQUEEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cMAYORIGUALEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cMAYORIGUALGreaterThanSignEqualsSignKeyword_4_0 = (Keyword)cMAYORIGUALEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cMENORIGUALEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cMENORIGUALLessThanSignEqualsSignKeyword_5_0 = (Keyword)cMENORIGUALEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cANDEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cANDAmpersandAmpersandKeyword_6_0 = (Keyword)cANDEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cOREnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cORVerticalLineVerticalLineKeyword_7_0 = (Keyword)cOREnumLiteralDeclaration_7.eContents().get(0);
		
		//enum OperadorLogico:
		//	IGUAL_IGUAL='==' | DIFERENTE='!=' | MAYORQUE='>' | MENORQUE='<' | MAYORIGUAL='>=' | MENORIGUAL='<=' | AND='&&' |
		//	OR='||';
		public EnumRule getRule() { return rule; }
		
		//IGUAL_IGUAL='==' | DIFERENTE='!=' | MAYORQUE='>' | MENORQUE='<' | MAYORIGUAL='>=' | MENORIGUAL='<=' | AND='&&' | OR='||'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IGUAL_IGUAL='=='
		public EnumLiteralDeclaration getIGUAL_IGUALEnumLiteralDeclaration_0() { return cIGUAL_IGUALEnumLiteralDeclaration_0; }
		
		//'=='
		public Keyword getIGUAL_IGUALEqualsSignEqualsSignKeyword_0_0() { return cIGUAL_IGUALEqualsSignEqualsSignKeyword_0_0; }
		
		//DIFERENTE='!='
		public EnumLiteralDeclaration getDIFERENTEEnumLiteralDeclaration_1() { return cDIFERENTEEnumLiteralDeclaration_1; }
		
		//'!='
		public Keyword getDIFERENTEExclamationMarkEqualsSignKeyword_1_0() { return cDIFERENTEExclamationMarkEqualsSignKeyword_1_0; }
		
		//MAYORQUE='>'
		public EnumLiteralDeclaration getMAYORQUEEnumLiteralDeclaration_2() { return cMAYORQUEEnumLiteralDeclaration_2; }
		
		//'>'
		public Keyword getMAYORQUEGreaterThanSignKeyword_2_0() { return cMAYORQUEGreaterThanSignKeyword_2_0; }
		
		//MENORQUE='<'
		public EnumLiteralDeclaration getMENORQUEEnumLiteralDeclaration_3() { return cMENORQUEEnumLiteralDeclaration_3; }
		
		//'<'
		public Keyword getMENORQUELessThanSignKeyword_3_0() { return cMENORQUELessThanSignKeyword_3_0; }
		
		//MAYORIGUAL='>='
		public EnumLiteralDeclaration getMAYORIGUALEnumLiteralDeclaration_4() { return cMAYORIGUALEnumLiteralDeclaration_4; }
		
		//'>='
		public Keyword getMAYORIGUALGreaterThanSignEqualsSignKeyword_4_0() { return cMAYORIGUALGreaterThanSignEqualsSignKeyword_4_0; }
		
		//MENORIGUAL='<='
		public EnumLiteralDeclaration getMENORIGUALEnumLiteralDeclaration_5() { return cMENORIGUALEnumLiteralDeclaration_5; }
		
		//'<='
		public Keyword getMENORIGUALLessThanSignEqualsSignKeyword_5_0() { return cMENORIGUALLessThanSignEqualsSignKeyword_5_0; }
		
		//AND='&&'
		public EnumLiteralDeclaration getANDEnumLiteralDeclaration_6() { return cANDEnumLiteralDeclaration_6; }
		
		//'&&'
		public Keyword getANDAmpersandAmpersandKeyword_6_0() { return cANDAmpersandAmpersandKeyword_6_0; }
		
		//OR='||'
		public EnumLiteralDeclaration getOREnumLiteralDeclaration_7() { return cOREnumLiteralDeclaration_7; }
		
		//'||'
		public Keyword getORVerticalLineVerticalLineKeyword_7_0() { return cORVerticalLineVerticalLineKeyword_7_0; }
	}
	public class OperadorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "uniandes.mdd.aplicacion.blockchain.Blockchain.Operador");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cMASEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cMASPlusSignKeyword_0_0 = (Keyword)cMASEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMENOSEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMENOSHyphenMinusKeyword_1_0 = (Keyword)cMENOSEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cPRODUCTOEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cPRODUCTOAsteriskKeyword_2_0 = (Keyword)cPRODUCTOEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cDIVISIONEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cDIVISIONSolidusKeyword_3_0 = (Keyword)cDIVISIONEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cIGUALEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cIGUALEqualsSignKeyword_4_0 = (Keyword)cIGUALEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cGETEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cGETGETKeyword_5_0 = (Keyword)cGETEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cDELETEEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cDELETEDELETEKeyword_6_0 = (Keyword)cDELETEEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cPUTEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cPUTPUTKeyword_7_0 = (Keyword)cPUTEnumLiteralDeclaration_7.eContents().get(0);
		
		//enum Operador:
		//	MAS='+' | MENOS='-' | PRODUCTO='*' | DIVISION='/' | IGUAL='=' | GET | DELETE | PUT;
		public EnumRule getRule() { return rule; }
		
		//MAS='+' | MENOS='-' | PRODUCTO='*' | DIVISION='/' | IGUAL='=' | GET | DELETE | PUT
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//MAS='+'
		public EnumLiteralDeclaration getMASEnumLiteralDeclaration_0() { return cMASEnumLiteralDeclaration_0; }
		
		//'+'
		public Keyword getMASPlusSignKeyword_0_0() { return cMASPlusSignKeyword_0_0; }
		
		//MENOS='-'
		public EnumLiteralDeclaration getMENOSEnumLiteralDeclaration_1() { return cMENOSEnumLiteralDeclaration_1; }
		
		//'-'
		public Keyword getMENOSHyphenMinusKeyword_1_0() { return cMENOSHyphenMinusKeyword_1_0; }
		
		//PRODUCTO='*'
		public EnumLiteralDeclaration getPRODUCTOEnumLiteralDeclaration_2() { return cPRODUCTOEnumLiteralDeclaration_2; }
		
		//'*'
		public Keyword getPRODUCTOAsteriskKeyword_2_0() { return cPRODUCTOAsteriskKeyword_2_0; }
		
		//DIVISION='/'
		public EnumLiteralDeclaration getDIVISIONEnumLiteralDeclaration_3() { return cDIVISIONEnumLiteralDeclaration_3; }
		
		//'/'
		public Keyword getDIVISIONSolidusKeyword_3_0() { return cDIVISIONSolidusKeyword_3_0; }
		
		//IGUAL='='
		public EnumLiteralDeclaration getIGUALEnumLiteralDeclaration_4() { return cIGUALEnumLiteralDeclaration_4; }
		
		//'='
		public Keyword getIGUALEqualsSignKeyword_4_0() { return cIGUALEqualsSignKeyword_4_0; }
		
		//GET
		public EnumLiteralDeclaration getGETEnumLiteralDeclaration_5() { return cGETEnumLiteralDeclaration_5; }
		
		//'GET'
		public Keyword getGETGETKeyword_5_0() { return cGETGETKeyword_5_0; }
		
		//DELETE
		public EnumLiteralDeclaration getDELETEEnumLiteralDeclaration_6() { return cDELETEEnumLiteralDeclaration_6; }
		
		//'DELETE'
		public Keyword getDELETEDELETEKeyword_6_0() { return cDELETEDELETEKeyword_6_0; }
		
		//PUT
		public EnumLiteralDeclaration getPUTEnumLiteralDeclaration_7() { return cPUTEnumLiteralDeclaration_7; }
		
		//'PUT'
		public Keyword getPUTPUTKeyword_7_0() { return cPUTPUTKeyword_7_0; }
	}
	public class OperadorRelacionElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "uniandes.mdd.aplicacion.blockchain.Blockchain.OperadorRelacion");
		private final EnumLiteralDeclaration cPUNTOEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cPUNTOFullStopKeyword_0 = (Keyword)cPUNTOEnumLiteralDeclaration.eContents().get(0);
		
		//enum OperadorRelacion:
		//	PUNTO='.';
		public EnumRule getRule() { return rule; }
		
		//PUNTO='.'
		public EnumLiteralDeclaration getPUNTOEnumLiteralDeclaration() { return cPUNTOEnumLiteralDeclaration; }
		
		//'.'
		public Keyword getPUNTOFullStopKeyword_0() { return cPUNTOFullStopKeyword_0; }
	}
	public class DatoPrimitivoElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "uniandes.mdd.aplicacion.blockchain.Blockchain.DatoPrimitivo");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSTRINGEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSTRINGStringKeyword_0_0 = (Keyword)cSTRINGEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNUMERICOEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNUMERICOUintKeyword_1_0 = (Keyword)cNUMERICOEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cBOOLEANEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cBOOLEANBooleanKeyword_2_0 = (Keyword)cBOOLEANEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cADDRESSEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cADDRESSADDRESSKeyword_3_0 = (Keyword)cADDRESSEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum DatoPrimitivo:
		//	STRING='String' | NUMERICO='uint' | BOOLEAN='Boolean' | ADDRESS;
		public EnumRule getRule() { return rule; }
		
		//STRING='String' | NUMERICO='uint' | BOOLEAN='Boolean' | ADDRESS
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING='String'
		public EnumLiteralDeclaration getSTRINGEnumLiteralDeclaration_0() { return cSTRINGEnumLiteralDeclaration_0; }
		
		//'String'
		public Keyword getSTRINGStringKeyword_0_0() { return cSTRINGStringKeyword_0_0; }
		
		//NUMERICO='uint'
		public EnumLiteralDeclaration getNUMERICOEnumLiteralDeclaration_1() { return cNUMERICOEnumLiteralDeclaration_1; }
		
		//'uint'
		public Keyword getNUMERICOUintKeyword_1_0() { return cNUMERICOUintKeyword_1_0; }
		
		//BOOLEAN='Boolean'
		public EnumLiteralDeclaration getBOOLEANEnumLiteralDeclaration_2() { return cBOOLEANEnumLiteralDeclaration_2; }
		
		//'Boolean'
		public Keyword getBOOLEANBooleanKeyword_2_0() { return cBOOLEANBooleanKeyword_2_0; }
		
		//ADDRESS
		public EnumLiteralDeclaration getADDRESSEnumLiteralDeclaration_3() { return cADDRESSEnumLiteralDeclaration_3; }
		
		//'ADDRESS'
		public Keyword getADDRESSADDRESSKeyword_3_0() { return cADDRESSADDRESSKeyword_3_0; }
	}
	
	private final AplicacionElements pAplicacion;
	private final TipoDatoElements pTipoDato;
	private final LineaElements pLinea;
	private final ExpresionElements pExpresion;
	private final NamedElementElements pNamedElement;
	private final SmartContractElements pSmartContract;
	private final EStringElements pEString;
	private final EntidadElements pEntidad;
	private final OperacionElements pOperacion;
	private final EstadoElements pEstado;
	private final AtributoElements pAtributo;
	private final ParametroElements pParametro;
	private final EBooleanElements pEBoolean;
	private final ExpresionLogicaElements pExpresionLogica;
	private final ExpresionAritmeticaElements pExpresionAritmetica;
	private final VariableElements pVariable;
	private final CondicionalElements pCondicional;
	private final ElseElements pElse;
	private final ExpresionNumericaElements pExpresionNumerica;
	private final ExpresionTextoElements pExpresionTexto;
	private final ExpresionBooleanElements pExpresionBoolean;
	private final ExpresionReferenciadaElements pExpresionReferenciada;
	private final ExpresionRelacionalElements pExpresionRelacional;
	private final RetornoElements pRetorno;
	private final OperadorLogicoElements eOperadorLogico;
	private final OperadorElements eOperador;
	private final EDoubleElements pEDouble;
	private final EIntElements pEInt;
	private final OperadorRelacionElements eOperadorRelacion;
	private final PrimitivoElements pPrimitivo;
	private final MapaElements pMapa;
	private final DatoPrimitivoElements eDatoPrimitivo;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public BlockchainGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pAplicacion = new AplicacionElements();
		this.pTipoDato = new TipoDatoElements();
		this.pLinea = new LineaElements();
		this.pExpresion = new ExpresionElements();
		this.pNamedElement = new NamedElementElements();
		this.pSmartContract = new SmartContractElements();
		this.pEString = new EStringElements();
		this.pEntidad = new EntidadElements();
		this.pOperacion = new OperacionElements();
		this.pEstado = new EstadoElements();
		this.pAtributo = new AtributoElements();
		this.pParametro = new ParametroElements();
		this.pEBoolean = new EBooleanElements();
		this.pExpresionLogica = new ExpresionLogicaElements();
		this.pExpresionAritmetica = new ExpresionAritmeticaElements();
		this.pVariable = new VariableElements();
		this.pCondicional = new CondicionalElements();
		this.pElse = new ElseElements();
		this.pExpresionNumerica = new ExpresionNumericaElements();
		this.pExpresionTexto = new ExpresionTextoElements();
		this.pExpresionBoolean = new ExpresionBooleanElements();
		this.pExpresionReferenciada = new ExpresionReferenciadaElements();
		this.pExpresionRelacional = new ExpresionRelacionalElements();
		this.pRetorno = new RetornoElements();
		this.eOperadorLogico = new OperadorLogicoElements();
		this.eOperador = new OperadorElements();
		this.pEDouble = new EDoubleElements();
		this.pEInt = new EIntElements();
		this.eOperadorRelacion = new OperadorRelacionElements();
		this.pPrimitivo = new PrimitivoElements();
		this.pMapa = new MapaElements();
		this.eDatoPrimitivo = new DatoPrimitivoElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("uniandes.mdd.aplicacion.blockchain.Blockchain".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Aplicacion:
	//	{Aplicacion}
	//	'Aplicacion'
	//	name=EString
	//	'{' (smartcontract+=SmartContract smartcontract+=SmartContract*)? ('tipodato' tipodato+=TipoDato)*
	//	'}';
	public AplicacionElements getAplicacionAccess() {
		return pAplicacion;
	}
	
	public ParserRule getAplicacionRule() {
		return getAplicacionAccess().getRule();
	}
	
	//TipoDato:
	//	Entidad | Primitivo | Mapa;
	public TipoDatoElements getTipoDatoAccess() {
		return pTipoDato;
	}
	
	public ParserRule getTipoDatoRule() {
		return getTipoDatoAccess().getRule();
	}
	
	//Linea:
	//	Expresion | Variable | Condicional | Retorno;
	public LineaElements getLineaAccess() {
		return pLinea;
	}
	
	public ParserRule getLineaRule() {
		return getLineaAccess().getRule();
	}
	
	//Expresion:
	//	ExpresionLogica | ExpresionAritmetica | ExpresionNumerica | ExpresionTexto | ExpresionBoolean | ExpresionReferenciada
	//	| ExpresionRelacional;
	public ExpresionElements getExpresionAccess() {
		return pExpresion;
	}
	
	public ParserRule getExpresionRule() {
		return getExpresionAccess().getRule();
	}
	
	//NamedElement:
	//	Atributo | Parametro | Estado | Variable;
	public NamedElementElements getNamedElementAccess() {
		return pNamedElement;
	}
	
	public ParserRule getNamedElementRule() {
		return getNamedElementAccess().getRule();
	}
	
	//SmartContract:
	//	'SmartContract'
	//	name=EString
	//	'{' (entidades+=Entidad entidades+=Entidad*)? (estado+=Estado estado+=Estado*)? (operaciones+=Operacion
	//	operaciones+=Operacion*)?
	//	'}';
	public SmartContractElements getSmartContractAccess() {
		return pSmartContract;
	}
	
	public ParserRule getSmartContractRule() {
		return getSmartContractAccess().getRule();
	}
	
	//EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//Entidad:
	//	{Entidad}
	//	'Entidad'
	//	name=EString
	//	'{' (atributos+=Atributo atributos+=Atributo*)?
	//	'}';
	public EntidadElements getEntidadAccess() {
		return pEntidad;
	}
	
	public ParserRule getEntidadRule() {
		return getEntidadAccess().getRule();
	}
	
	//Operacion: //{Operacion}
	//	'Operacion' ('isUd=' esUserDefined?=EBoolean)? name=EString '(' (parametros+=Parametro ("," parametros+=Parametro)*)?
	//	')' (':' retorno=[TipoDato|EString])? '{' '('* lineas+=Linea* ')'* '}';
	public OperacionElements getOperacionAccess() {
		return pOperacion;
	}
	
	public ParserRule getOperacionRule() {
		return getOperacionAccess().getRule();
	}
	
	//Estado:
	//	'Estado'
	//	tipodato=[TipoDato|EString] name=EString;
	public EstadoElements getEstadoAccess() {
		return pEstado;
	}
	
	public ParserRule getEstadoRule() {
		return getEstadoAccess().getRule();
	}
	
	//Atributo:
	//	tipodato=[TipoDato|EString] name=EString;
	public AtributoElements getAtributoAccess() {
		return pAtributo;
	}
	
	public ParserRule getAtributoRule() {
		return getAtributoAccess().getRule();
	}
	
	//Parametro:
	//	tipodato=[TipoDato|EString] name=EString;
	public ParametroElements getParametroAccess() {
		return pParametro;
	}
	
	public ParserRule getParametroRule() {
		return getParametroAccess().getRule();
	}
	
	//EBoolean ecore::EBoolean:
	//	'true' | 'false';
	public EBooleanElements getEBooleanAccess() {
		return pEBoolean;
	}
	
	public ParserRule getEBooleanRule() {
		return getEBooleanAccess().getRule();
	}
	
	//ExpresionLogica:
	//	'ExpLog'
	//	'('* izq=Expresion ')'*
	//	operador=OperadorLogico?
	//	'('* der=Expresion ')'*;
	public ExpresionLogicaElements getExpresionLogicaAccess() {
		return pExpresionLogica;
	}
	
	public ParserRule getExpresionLogicaRule() {
		return getExpresionLogicaAccess().getRule();
	}
	
	//ExpresionAritmetica:
	//	{ExpresionAritmetica}
	//	'ExpArit'
	//	'('* izq=Expresion ')'*
	//	operador=Operador?
	//	'('* der=Expresion ')'*;
	public ExpresionAritmeticaElements getExpresionAritmeticaAccess() {
		return pExpresionAritmetica;
	}
	
	public ParserRule getExpresionAritmeticaRule() {
		return getExpresionAritmeticaAccess().getRule();
	}
	
	//Variable:
	//	'var'
	//	tipodato=[TipoDato|EString] name=EString?;
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}
	
	//Condicional If:
	//	'if' expresionlogica=ExpresionLogica?
	//	'{'
	//	lineas+=Linea*
	//	'}'
	//	elseLines=Else?;
	public CondicionalElements getCondicionalAccess() {
		return pCondicional;
	}
	
	public ParserRule getCondicionalRule() {
		return getCondicionalAccess().getRule();
	}
	
	//Else:
	//	'else'
	//	'{'
	//	lineas+=Linea*
	//	'}';
	public ElseElements getElseAccess() {
		return pElse;
	}
	
	public ParserRule getElseRule() {
		return getElseAccess().getRule();
	}
	
	//ExpresionNumerica:
	//	{ExpresionNumerica}
	//	'ExpNum'
	//	value=EDouble?;
	public ExpresionNumericaElements getExpresionNumericaAccess() {
		return pExpresionNumerica;
	}
	
	public ParserRule getExpresionNumericaRule() {
		return getExpresionNumericaAccess().getRule();
	}
	
	//ExpresionTexto:
	//	{ExpresionTexto}
	//	'ExpTex'
	//	value=EString?;
	public ExpresionTextoElements getExpresionTextoAccess() {
		return pExpresionTexto;
	}
	
	public ParserRule getExpresionTextoRule() {
		return getExpresionTextoAccess().getRule();
	}
	
	//ExpresionBoolean:
	//	{ExpresionBoolean}
	//	'ExpBool'
	//	value?=EBoolean?;
	public ExpresionBooleanElements getExpresionBooleanAccess() {
		return pExpresionBoolean;
	}
	
	public ParserRule getExpresionBooleanRule() {
		return getExpresionBooleanAccess().getRule();
	}
	
	//ExpresionReferenciada:
	//	'ExpRef'
	//	'{' ('id' id=EInt)?
	//	referencia=[NamedElement|EString]
	//	'}';
	public ExpresionReferenciadaElements getExpresionReferenciadaAccess() {
		return pExpresionReferenciada;
	}
	
	public ParserRule getExpresionReferenciadaRule() {
		return getExpresionReferenciadaAccess().getRule();
	}
	
	//ExpresionRelacional:
	//	'ExpRel'
	//	izq=Expresion
	//	operadorRelacional=OperadorRelacion?
	//	der=Expresion;
	public ExpresionRelacionalElements getExpresionRelacionalAccess() {
		return pExpresionRelacional;
	}
	
	public ParserRule getExpresionRelacionalRule() {
		return getExpresionRelacionalAccess().getRule();
	}
	
	//Retorno:
	//	'return'
	//	'{'
	//	lineaRetorno+=Linea*
	//	'}';
	public RetornoElements getRetornoAccess() {
		return pRetorno;
	}
	
	public ParserRule getRetornoRule() {
		return getRetornoAccess().getRule();
	}
	
	//enum OperadorLogico:
	//	IGUAL_IGUAL='==' | DIFERENTE='!=' | MAYORQUE='>' | MENORQUE='<' | MAYORIGUAL='>=' | MENORIGUAL='<=' | AND='&&' |
	//	OR='||';
	public OperadorLogicoElements getOperadorLogicoAccess() {
		return eOperadorLogico;
	}
	
	public EnumRule getOperadorLogicoRule() {
		return getOperadorLogicoAccess().getRule();
	}
	
	//enum Operador:
	//	MAS='+' | MENOS='-' | PRODUCTO='*' | DIVISION='/' | IGUAL='=' | GET | DELETE | PUT;
	public OperadorElements getOperadorAccess() {
		return eOperador;
	}
	
	public EnumRule getOperadorRule() {
		return getOperadorAccess().getRule();
	}
	
	//EDouble ecore::EDouble:
	//	'-'? INT? '.' INT (('E' | 'e') '-'? INT)?;
	public EDoubleElements getEDoubleAccess() {
		return pEDouble;
	}
	
	public ParserRule getEDoubleRule() {
		return getEDoubleAccess().getRule();
	}
	
	//EInt ecore::EInt:
	//	'-'? INT;
	public EIntElements getEIntAccess() {
		return pEInt;
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}
	
	//enum OperadorRelacion:
	//	PUNTO='.';
	public OperadorRelacionElements getOperadorRelacionAccess() {
		return eOperadorRelacion;
	}
	
	public EnumRule getOperadorRelacionRule() {
		return getOperadorRelacionAccess().getRule();
	}
	
	//Primitivo:
	//	{Primitivo} tipo=DatoPrimitivo?
	//	name=EString;
	public PrimitivoElements getPrimitivoAccess() {
		return pPrimitivo;
	}
	
	public ParserRule getPrimitivoRule() {
		return getPrimitivoAccess().getRule();
	}
	
	//Mapa:
	//	'Map'
	//	'<'
	//	tipoDatoKey=[TipoDato|EString]
	//	',' tipoDatoValue=[TipoDato|EString] '>'
	//	':'
	//	name=EString;
	public MapaElements getMapaAccess() {
		return pMapa;
	}
	
	public ParserRule getMapaRule() {
		return getMapaAccess().getRule();
	}
	
	//enum DatoPrimitivo:
	//	STRING='String' | NUMERICO='uint' | BOOLEAN='Boolean' | ADDRESS;
	public DatoPrimitivoElements getDatoPrimitivoAccess() {
		return eDatoPrimitivo;
	}
	
	public EnumRule getDatoPrimitivoRule() {
		return getDatoPrimitivoAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
