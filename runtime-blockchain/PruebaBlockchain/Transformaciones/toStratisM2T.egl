using Stratis.SmartContracts;
using System.Linq;
using System;


[%
for (smc in SmartContract.all) { %]
public class [%=smc.name%] : SmartContract 
{
 	[%for (ent in smc.entidades) { %]
	public struct [%=ent.name%] {
	[%for (attr in ent.atributos) { %]
		public [%=attr.tipodato.name%] [%=attr.name%]; 
		[%}%]
		}
		public [%=smc.name%](ISmartContractState smartContractState, ulong durationBlocks)
    	: base(smartContractState)
    	{
        
    	}
		[%for (est in smc.estado) { %]
		public ISmartContractMapping<[%=ent.name%]> [%=est.name%]
    	{
        	get
        	{
            	return PersistentState.GetStructMapping<[%=ent.name%]>>("[%=est.name%]");
        	}
    	}
		[%}%]
		[%for (ope in smc.operaciones) { %]	
		public [%if(ope.retorno.isDefined()){%][%=getRetorno(ope)%][%}else{%]void[%} %] [%=ope.name%] ([%var i=0;var cantpar=ope.parametros.size();for (par in ope.parametros) { %][%=par.tipodato.name%] [%=par.name%][%i++;%][%if(i<>cantpar){%],[%}%][%}%]){
			[%for (line in ope.lineas) {
				var izq; var der; var ope;
				 if(line.isKindOf(ExpresionBinaria)){%]
				[%=getExpresion(line)%];
				 [%}else if(line.isTypeOf(If)){%]
				if([%=getExpresion(line.expresionlogica)%]){
					[%for (body in line.lineas){%]
						[%=getExpresion(body)%];
					[%}%]
				}[%if(line.elseLines.size()>0){%]else{
					[%for (body in line.elseLines.lineas){
%]						[%=getExpresion(body)
					%];[%}%]	
				[%}%]
				}	 	
				[%}else if(not (line.isTypeOf(Retorno))){%]
				[%=getValue(line)%];
				[%}else{
					if(line.isTypeOf(Retorno)){
						if(line.lineaRetorno.size()>0){%]
				[%=getLineaRetorno(line)%];
				[%
						}
					}
				%][%}				
				%][%
			}%]
		}
		[%}%]
[%}%] 
}
[%}%]
[%

operation getLineaRetorno(line: Linea) : String {
	for (ret in line.lineaRetorno){
		return "return " + getExpresion(ret);
	}
}

operation getRetorno(ope: Operacion) : String{
  if(ope.retorno.isUndefined()){
  	return "";
  }else{
  	if(ope.retorno.isTypeOf(Primitivo)){
  		return ope.retorno.tipo.asString();
  	}else{
  		return ope.retorno.name.asString();
  	}
  }
}

operation getValue (line:Linea) : String {
	if(line.isTypeOf(ExpresionNumerica) or line.isTypeOf(ExpresionTexto) or line.isTypeOf(ExpresionBoolean)){
		if(line.isTypeOf(ExpresionTexto)){
			return ' "'+line.value.asString()+ '"';
		}else{
			return line.value.asString();
		}
	}else if(line.isTypeOf(ExpresionReferenciada)){
		return line.referencia.name;
	}else if(line.isTypeOf(Variable)){
	    return line.tipodato.name+ " " + line.name + " = new " + line.tipodato.name +"()";
	}
}

operation getOperador(line:Linea) : String{
		var ope;
		if(line.isTypeOf(ExpresionAritmetica)){
				ope=line.operador.asString();
	  	}else if (line.isTypeOf(ExpresionLogica)){
	  			ope=line.operador.asString();
	  	}else if(line.isTypeOf(ExpresionRelacional)){
	  			ope=".";
	  	} 
	  	return ope;
}

operation  getExpresion (line: Linea) : String {
	if(not(line.isKindOf(ExpresionBinaria))){
		return getValue(line);
	}else{
		if(getOperador(line)=="PUT"){
			return getExpresion(line.Izq)+ "[" + getExpresion(line.Der)+"]";
		}else if(getOperador(line)=="GET"){
			return getExpresion(line.Izq)+ "[" + getExpresion(line.Der)+"]";
		}else if(getOperador(line)=="."){
			return getExpresion(line.Izq)+getOperador(line)+getExpresion(line.Der);
		}else{
			return getExpresion(line.Izq)+" "+ getOperador(line)+" "+getExpresion(line.Der);
		}
		
	}	
}

%]