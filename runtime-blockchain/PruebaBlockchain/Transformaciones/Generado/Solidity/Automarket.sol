//-----------------------------------------------------------------------
// <copyright file="Automarket.sol" company=" <auto-generated, change this tag by your enterprise name />  ">
//     Copyright (c) <auto-generated, change this tag by your enterprise name /> . All rights reserved.
// </copyright>
// <author> <auto-generated, change this tag by your name /> </author>
//-----------------------------------------------------------------------
pragma solidity ^0.4.0;


contract AutoMarket {
 		
 		/// <summary>Get or set property Vehiculo</summary>
		struct Vehiculo { 
			string Marca; 
			string Modelo; 
			string Linea; 
			int Cilindraje; 
			address Placa; 
			int Precio; 
			bool Nuevo; 
			string Comentarios;		
		}
		
		/// <summary>Get or set property Vehiculos</summary>
		mapping (address => Vehiculo) public Vehiculos;
		
		/// <summary>Get or set property VehiculosCaros</summary>
		mapping (address => Vehiculo) public VehiculosCaros;
		
		/// <summary>Get or set property VehiculosBaratos</summary>
		mapping (address => Vehiculo) public VehiculosBaratos;
		
		/// <summary>Get or set property Prueba</summary>
		string Prueba;
		
		
		/// <summary>  <auto-generated, change this tag by to description of the method />  </summary>
		/// <param name="Marca"></param>
		/// <param name="Modelo"></param>
		/// <param name="Linea"></param>
		/// <param name="Placa"></param>
		/// <param name="Cilindraje"></param>
		/// <param name="Precio"></param>
		/// <returns>  <auto-generated, change this tag by to description of the method returns />   </returns>
		function CrearVehiculo (string Marca,string Modelo,string Linea,address Placa,int Cilindraje,int Precio) public {
			 Vehiculo memory vehiculo;
			 vehiculo.Marca = Marca ; 
			 vehiculo.Modelo = Modelo ; 
			 vehiculo.Linea = Linea ; 
			 vehiculo.Cilindraje = Cilindraje ; 
			 vehiculo.Placa = Placa ; 
			 vehiculo.Precio = Precio ; 
			 vehiculo.Nuevo = true ; 
			 vehiculo.Comentarios =  "SinComentarios" ; 
			  Vehiculos[Placa] = vehiculo ; 
			if((Precio >= 1000000000)){
				 VehiculosCaros[Placa] = vehiculo ;
			}else{	
				 VehiculosBaratos[Placa] = vehiculo ;
			}	 	
		}
		
		/// <summary>  <auto-generated, change this tag by to description of the method />  </summary>
		/// <param name="Placa"></param>
		/// <returns>  <auto-generated, change this tag by to description of the method returns />   </returns>
		function ConsultarVehiculo (address Placa) public returns(string){
			return Vehiculos[Placa].Marca;	
		}
		
		/// <summary>  <auto-generated, change this tag by to description of the method />  </summary>
		/// <param name="PrecioVehiculo"></param>
		/// <param name="ImpuestoVehiculo"></param>
		/// <param name="ValorTraspaso"></param>
		/// <param name="ComisionRunt"></param>
		/// <returns>  <auto-generated, change this tag by to description of the method returns />   </returns>
		function CalcularCostos (int PrecioVehiculo,int ImpuestoVehiculo,int ValorTraspaso,int ComisionRunt) public returns(int){
			return (((PrecioVehiculo + (PrecioVehiculo * ImpuestoVehiculo)) + ValorTraspaso) + ComisionRunt);	
		}
		
		/// <summary>  <auto-generated, change this tag by to description of the method />  </summary>
		/// <param name="Placa"></param>
		/// <param name="Cilindraje"></param>
		/// <param name="Precio"></param>
		/// <returns>  <auto-generated, change this tag by to description of the method returns />   </returns>
		function ActualizarVehiculo (address Placa,int Cilindraje,int Precio) public {
			 Vehiculo memory vehiculo;
			 vehiculo.Cilindraje = Cilindraje ; 
			 vehiculo.Placa = Placa ; 
			 vehiculo.Precio = Precio ; 
			 vehiculo.Nuevo = true ; 
			  Vehiculos[Placa] = vehiculo ; 
		}
 
}

