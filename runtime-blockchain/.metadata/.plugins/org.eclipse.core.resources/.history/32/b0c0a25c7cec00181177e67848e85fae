pragma solidity ^0.4.0;

[%for (smc in SmartContract.all) { %]
contract [%=smc.name%] {
 	[%for (ent in smc.entidades) { %]
		struct [%=ent.name%] {[%for (attr in ent.atributos) {%] 
		  [%=attr.tipodato.name%] [%=attr.name%];[%}%]
		
		}
		[%for (est in smc.estado) {  
		%]
		[%=getEstado(est)%]
		[%}%]
		[%for (ope in smc.operaciones) { %]
		function [%=ope.name%] ([%var i=0;var cantpar=ope.parametros.size();for (par in ope.parametros) { %][%=par.tipodato.name%] [%=par.name%][%i++;%][%if(i<>cantpar){%],[%}%][%}%])[%if(ope.retorno.size()>0){%] [%=getRetorno(ope)%][%} %]{
			[%for (line in ope.lineas) {
				var izq; var der;
				 if(line.isKindOf(ExpresionBinaria)){%]
			[%=getExpresion(line)%]; 
				 [%}else if(line.isTypeOf(If)){%]
			if( [%=getExpresion(line.expresionlogica)%]){
				[%for (body in line.lineas){%]
				[%=getExpresion(body)%];
				[%}%]
			}[%if(line.elseLines.size()>0){%]else{	
				[%for (body in line.elseLines.lineas){%]
				[%=getExpresion(body)%];
				[%}%]	
			[%}%]
			}	 	
			[%}else if(not (line.isTypeOf(Retorno))){%]
			[%=getValue(line)%];
			[%}else{
				if(line.isTypeOf(Retorno)){
					if(line.lineaRetorno.size()>0){%]
			[%=getLineaRetorno(line)%];	
					[%}
				}				 
			}%]	
			[%}%]
		}
		[%}%]
[%}%] 
}
[%}%]

[%
operation getEstado(est:Estado) : String{
	if(est.tipodato.isTypeOf(Mapa)){
		return "mapping (" + est.tipodato.tipoDatoKey.name + " => " + est.tipodato.tipoDatoValue.name + ") public" + est.name + ";";
	}else{
		return est.tipodato.name + " " + est.name + ";";
	}
}

operation getLineaRetorno(line: Linea) : String {
	for (ret in line.lineaRetorno){
		return "return " + getExpresion(ret);
	}
	
}
operation getRetorno(ope: Operacion) : String{
  if(ope.retorno.isUndefined()){
  	return "";
  }else{
  	return "public returns (" + ope.retorno.name.asString() + ")";
  }
}
operation getValue (line:Linea) : String {
	if(line.isTypeOf(ExpresionNumericaInt) or line.isTypeOf(ExpresionTexto) or line.isTypeOf(ExpresionBoolean) or line.isTypeOf(ExpresionNumericaDouble)){
		if(line.isTypeOf(ExpresionTexto)){
			return ' "'+line.value.asString()+ '"';
		}else{
			return line.value.asString();
		}
	}else if(line.isTypeOf(ExpresionReferenciada)){
		return line.referencia.name;
	}else if(line.isTypeOf(Variable)){
	    return " "+ line.tipodato.name + " memory " + line.name;
	}else{
		return "";
	}
}

operation getOperador(line:Linea) : String{
		var ope;
		if(line.isTypeOf(ExpresionAritmetica)){
				ope=line.operador.asString();
	  	}else if (line.isTypeOf(ExpresionLogica)){
	  			ope=line.operador.asString();
	  	}else if(line.isTypeOf(ExpresionRelacional)){
	  			ope=".";
	  	} 
	  	return ope;
}

operation  getExpresion (line: Linea) : String {
	if(not(line.isKindOf(ExpresionBinaria))){
		return getValue(line);
	}else{
		if(line.isTypeOf(ExpresionAritmetica)){
			if(getOperador(line)=="PUT"){
				return " "+ getExpresion(line.Izq)+ "[" + getExpresion(line.Der)+"]";
			}else if(getOperador(line)=="GET"){
				return getExpresion(line.Izq)+ "[" + getExpresion(line.Der)+"]";
			}else if(line.operador.asString <> "="){
				return "( "+ getExpresion(line.Izq)+" "+ getOperador(line)+" "+getExpresion(line.Der)+" )";
			}else{
				return " "+ getExpresion(line.Izq)+" "+ getOperador(line)+" "+getExpresion(line.Der)+" ";
			}
		}else if(line.isTypeOf(ExpresionLogica)){
			return "( "+ getExpresion(line.Izq)+" "+ getOperador(line)+" "+getExpresion(line.Der)+" )"; 
		}
		else{
			return " "+ getExpresion(line.Izq)+" "+ getOperador(line)+" "+getExpresion(line.Der)+" ";
		}
		
	}	
}

%]