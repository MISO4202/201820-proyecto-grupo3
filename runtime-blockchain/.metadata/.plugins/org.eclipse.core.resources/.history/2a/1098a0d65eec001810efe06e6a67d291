pragma solidity ^0.4.0;

contract AutoMarket {
		struct Vehiculo {
		    string Marca;			 
		    string Modelo;			 
		    string Linea;			 
		    uint Cilindraje			 
		    address Placa;			 
		    uint Precio			 
		    bool Nuevo;			 
		    string Comentarios;			 
		}
		mapping (address => Vehiculo) publicVehiculos;
		mapping (address => Vehiculo) publicVehiculosCaros;
		mapping (address => Vehiculo) publicVehiculosBaratos;
		function ConsultarVehiculo (string Placa) public returns (Vehiculo){
			return  Vehiculos[Placa] . Marca ;	
				
								 
				
		}
		function CalcularCostos (int PrecioVehiculo,int ImpuestoVehiculo,int ValorTraspaso,int ComisionRunt) public returns (int){
			return ( ( ( ( PrecioVehiculo * 0.19 ) + ( PrecioVehiculo * ImpuestoVehiculo ) ) + ValorTraspaso ) + ComisionRunt );	
				
								 
				
		}
		function CrearVehiculo (string Marca,string Modelo,string Linea,string Placa,int Cilindraje,int Precio) {
			 Vehiculo memory vehiculo;
				
			  vehiculo . Marca  = Marca ; 
				
			  vehiculo . Modelo  = Modelo ; 
				
			  vehiculo . Linea  = Linea ; 
				
			  vehiculo . Cilindraje  = Cilindraje ; 
				
			  vehiculo . Placa  = Placa ; 
				
			  vehiculo . Precio  = Precio ; 
				
			  vehiculo . Nuevo  = true ; 
				
			  vehiculo . Comentarios  =  "SinComentarios" ; 
				
			  Vehiculos[Placa] = vehiculo ; 
				
			if( ( ( Precio >= 1.0E8 ) || ( ( Marca ==  "Ferrari" ) && ( Marca !=  "Renault" ) ) )){
				 VehiculosCaros[Placa] = vehiculo ;
			}else{	
				 VehiculosBaratos[Placa] = vehiculo ;
	
			}	 	
				
		}
		function ActualizarVehiculo (string Placa,int Cilindraje,int Precio) {
			 Vehiculo memory vehiculo;
				
			  vehiculo . Cilindraje  = Cilindraje ; 
				
			  vehiculo . Placa  = Placa ; 
				
			  vehiculo . Precio  = Precio ; 
				
			  vehiculo . Nuevo  = true ; 
				
			  Vehiculos[Placa] = vehiculo ; 
				
		}
 
}
	

