pragma solidity ^0.4.0;

[%for (smc in SmartContract.all) { %]
contract [%=smc.name%] {
 	[%for (ent in smc.entidades) { %]
		struct [%=ent.name%] {
		  [%for (attr in ent.atributos) { 
		    if(attr.tipodato.name=='int'){%]
		    [%='uint'%] [%=attr.name%][%}else{%]
		    [%=attr.tipodato.name%] [%=attr.name%][%}
		  %]
			 
		[%}%]
		}
		[%for (est in smc.estado) { 
		var attrId=ent.atributos.select(at | at.isId=true).first(); 
		%]
		mapping ([%=attrId.tipodato.name%] => [%=est.tipodato.name%] ) public [%=est.name%];
		[%}%]
		[%for (ope in smc.operaciones) { %]
		function [%=ope.name%] ([%var i=0;var cantpar=ope.parametros.size();for (par in ope.parametros) { %][%=par.tipodato.name%] [%=par.name%][%i++;%][%if(i<>cantpar){%],[%}%][%}%]){
			[%for (line in ope.lineas) {
				var izq; var der; var ope;
				 if(line.isKindOf(ExpresionBinaria)){%]
					[%=getExpresionBinariaAux(line)%] 
				 [%}else{%]
					[%=getValue(line)%]				 
				 [%}
				%]
				
			[%}%]
		}
		[%}%]
[%}%] 
}
	
[%}%]

[%
operation getValue (line:Linea) : String {
	if(line.isTypeOf(ExpresionNumerica) or line.isTypeOf(ExpresionTexto) or line.isTypeOf(ExpresionBoolean)){
		return line.value.asString().println();
	}else if(line.isTypeOf(ExpresionReferenciada)){
		return line.referencia.name.println();
	}else if(line.isTypeOf(Variable)){
	    return line.name.println();
	}
}

operation getOperador(line:Linea) : String{
		var ope;
		if(line.isTypeOf(ExpresionAritmetica)){
	  			ope=line.operador;
	  	}else if (line.isTypeOf(ExpresionLogica)){
	  			ope=line.OperadorLogico;
	  	}else if(line.isTypeOf(ExpresionRelacional)){
	  			ope=".";
	  	} 
	  	return ope;
}

operation getRama (line:Linea) : List {
	var rama : List [3];
	rama[0]=line.Izq.flatten();
	rama[1]=getOperador(line);
	rama[2]=line.Der;
	rama.println();
	return rama;
}

operation  getExpresionBinaria (line: ExpresionBinaria) : String {
	
		if(line.Der.isTypeOf(ExpresionAritmetica)){
			
		}else if(line.Der.isTypeOf(ExpresionLogica)){
			
		}else if(line.Der.isTypeOf(ExpresionRelacional)){
			
		}	
	
		
	
}

operation  getExpresionBinariaAux (line: Linea) : String {
	if(not(line.isTypeOf(ExpresionBinaria))){
		return getValue(line);
	}else{
		return getExpresionBinariaAux(line.Izq) + " " + getOperador(line) + " " + getExpresionBinariaAux(line.Der);
	}	
}

operation  getExpresionValue (line : Linea) :  String {
	if(line.isTypeOf(ExpresionNumerica) or line.isTypeOf(ExpresionTexto) or line.isTypeOf(ExpresionBoolean)){
		return line.value.asString();
	}else if(line.isTypeOf(ExpresionReferenciada))
	{
		return line.referencia.name;
	}else{
		return "";
	}
}


operation getLine(line:Linea) : String {
	var der; var der1; var der2;
	var izq; var ope;
	var linea; var rama;
	var testRama;
	if(line.isKindOf(ExpresionBinaria)){
		linea=line.select(l | l.isKindOf(Expresion)).flatten();
		for(val in linea){
	  		if(val.Izq.isKindOf(ExpresionBinaria)){
	  			rama=val.Izq;
	  			while(rama.isKindOf(ExpresionBinaria)){
	  				for(ri in rama){
	  	  				der1=getValue(ri);
			  	  		ope=getOperador(ri);
	  	  				izq=ri.Izq;
	  	  				der+=izq + " "+ ope + " " + der1;
	  	  				der.println();
	  				}
	  				rama=rama.Izq;
	  			}
	  		}else{
	  			izq=getValue(val.Izq);	  
	  		}
	  		der+=getValue(val.Der);
	  		ope=getOperador(val);
	  		der2=izq+" "+ope+ " "+der;
	  		//der2.println();  
		}
			
	}else if(line.isTypeOf(If)){
		
	}else if(line.isTypeOf(Else)){
	
	}
	return der2;
	
}
%]