using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Stratis.SmartContracts;
using System.Collections.Generic;

namespace [%=app%].Tests {

[%for (smc in SmartContract.all) { %]
	[TestClass]
	public class Test_[%=smc.name%]Tests {
	
		private static readonly Address CoinbaseAddress = (Address)"Sj2p6ZRHdLvywyi43HYoE4bu2TF1nvavjR";
        private static readonly Address ContractOwnerAddress = (Address)"STpNXhJY6yrX4oh5LUeFbcBGxGCVxfV1ac";
        private static readonly Address ContractAddress = (Address)"SkNHV22dsvWdVb6Mi8uSGRbA8q9YSpezbw";

        private const ulong ContractDeployBlockNumber = 1;
        private const ulong Duration = 20u;
        private const ulong GasLimit = 10000;

        private Dictionary<Address, ulong> BlockchainBalances;

        private IList<Address> SampleAddresses = new List<Address> {
            new Address("SeMvVcDKTLBrxVua5GXmdF8qBYTbJZt4NJ"),
            new Address("Sipqve53hyjzTo2oU7PUozpT1XcmATnkTn"),
            new Address("SXTtiQq2S4LrjWj2QMnpFfRJuzHGkfxuCE"),
            new Address("STCutNQ1haZT472aYnuBYcqbyH7QiDMNox"),
            new Address("ScBovGKDLrSyjRqJVGjXWLrdpTufWKFzne")
        };
        
		private TestSmartContractState SmartContractState;
		[TestInitialize]
	    public void Initialize()
	    {	
	    	BlockchainBalances = new Dictionary<Address, ulong>();
            var block = new TestBlock
            {
                Coinbase = CoinbaseAddress,
                Number = ContractDeployBlockNumber
            };
            var message = new TestMessage
            {
                ContractAddress = ContractAddress,
                GasLimit = (Gas)GasLimit,
                Sender = ContractOwnerAddress,
                Value = 0u
            };
            var getContractBalance = new Func<ulong>(() => BlockchainBalances[ContractAddress]);
            var persistentState = new TestPersistentState();

            var internalTransactionExecutor = new TestInternalTransactionExecutor(BlockchainBalances, ContractAddress, SampleAddresses);
            var gasMeter = new TestGasMeter((Gas)GasLimit);
            var hashHelper = new TestInternalHashHelper();

            this.SmartContractState = new TestSmartContractState(
                block,
                message,
                persistentState,
                gasMeter,
                internalTransactionExecutor,
                getContractBalance,
                hashHelper
            );
        }
	    
		[%for (ope in smc.operaciones) { %]
		[TestMethod]
		public void Test[%=ope.name%] (){
			[%=smc.name%] smartContract = new [%=smc.name%](SmartContractState);
			
			smartContract.[%=ope.name%]([%var i=0;var cantpar=ope.parametros.size();for (par in ope.parametros) { %] [%=getTestData(par)%] [%i++;%][%if(i<>cantpar){%],[%}%][%}%]);
			
			Assert.IsTrue(true);
		}
		[%}%]
	[%}%]
	}
}
[%
operation getTestData (parametro:Parametro) : String {
	var result = "";
	if(parametro.tipodato.isTypeOf(Primitivo)){
		if(parametro.tipodato.tipo.asString()=='address'){
			result = '(Address)"0x0fC8Fff9aA5077B938A8FEfFF76bA39A3F5f4f70"';
		}else if(parametro.tipodato.tipo.asString()=='String'){
			result = "\"Test\"";
 		}else if(parametro.tipodato.tipo.asString()=='Boolean'){
			result = "false";
		}else if(parametro.tipodato.tipo.asString()=='int'){
			result = "2650";
		}
 	}else{
 		result = "";
 	}
 	return result;
}
%]