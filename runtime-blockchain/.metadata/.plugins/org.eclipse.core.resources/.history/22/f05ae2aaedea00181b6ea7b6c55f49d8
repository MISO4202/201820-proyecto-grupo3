pragma solidity ^0.4.0;

contract AutoMarket {
		struct Vehiculo {
		    string Marca			 
		    string Modelo			 
		    string Linea			 
		    uint Cilindraje			 
		    string Placa			 
		    uint Precio			 
		    bool Nuevo			 
		    string Comentarios			 
		}
		mapping (string => MapaVehiculos ) public Vehiculos;
		mapping (string => MapaVehiculos ) public VehiculosCaros;
		mapping (string => MapaVehiculos ) public VehiculosBaratos;
		function ConsultarVehiculo (string Placa){
			Vehiculos[Placa]; 
				
		}
		function CalcularCostos (int PrecioVehiculo,int ImpuestoVehiculo,int ValorTraspaso,int ComisionRunt){
			    PrecioVehiculo * 0.19  +  PrecioVehiculo * ImpuestoVehiculo   + ValorTraspaso  + ComisionRunt ; 
				
		}
		function CrearVehiculo (string Marca,string Modelo,string Linea,string Placa,int Cilindraje,int Precio){
			memory vehiculo = Vehiculo;				 
				
			  vehiculo . Marca  = Marca ; 
				
			  vehiculo . Modelo  = Modelo ; 
				
			  vehiculo . Linea  = Linea ; 
				
			  vehiculo . Cilindraje  = Cilindraje ; 
				
			  vehiculo . Placa  = Placa ; 
				
			  vehiculo . Precio  = Precio ; 
				
			  vehiculo . Nuevo  = true ; 
				
			  vehiculo . Comentarios  =  "SinComentarios" ; 
				
			  Vehiculos[Placa] = vehiculo ; 
				
			;				 
				
		}
		function ActualizarVehiculo (string Placa,int Cilindraje,int Precio){
			memory vehiculo = Vehiculo;				 
				
			  vehiculo . Cilindraje  = Cilindraje ; 
				
			  vehiculo . Placa  = Placa ; 
				
			  vehiculo . Precio  = Precio ; 
				
			  vehiculo . Nuevo  = true ; 
				
			  Vehiculos[Placa] = vehiculo ; 
				
		}
 
}
	

