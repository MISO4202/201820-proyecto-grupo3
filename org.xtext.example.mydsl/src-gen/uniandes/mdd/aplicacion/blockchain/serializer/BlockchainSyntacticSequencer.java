/*
 * generated by Xtext 2.12.0
 */
package uniandes.mdd.aplicacion.blockchain.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import uniandes.mdd.aplicacion.blockchain.services.BlockchainGrammarAccess;

@SuppressWarnings("all")
public class BlockchainSyntacticSequencer extends AbstractSyntacticSequencer {

	protected BlockchainGrammarAccess grammarAccess;
	protected AbstractElementAlias match_ExpresionAritmetica_LeftParenthesisKeyword_2_a;
	protected AbstractElementAlias match_ExpresionAritmetica_LeftParenthesisKeyword_6_a;
	protected AbstractElementAlias match_ExpresionAritmetica_RightParenthesisKeyword_4_a;
	protected AbstractElementAlias match_ExpresionAritmetica_RightParenthesisKeyword_8_a;
	protected AbstractElementAlias match_ExpresionLogica_LeftParenthesisKeyword_1_a;
	protected AbstractElementAlias match_ExpresionLogica_LeftParenthesisKeyword_5_a;
	protected AbstractElementAlias match_ExpresionLogica_RightParenthesisKeyword_3_a;
	protected AbstractElementAlias match_ExpresionLogica_RightParenthesisKeyword_7_a;
	protected AbstractElementAlias match_Operacion_LeftParenthesisKeyword_9_a;
	protected AbstractElementAlias match_Operacion_ReturnKeyword_8_q;
	protected AbstractElementAlias match_Operacion_RightParenthesisKeyword_11_a;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (BlockchainGrammarAccess) access;
		match_ExpresionAritmetica_LeftParenthesisKeyword_2_a = new TokenAlias(true, true, grammarAccess.getExpresionAritmeticaAccess().getLeftParenthesisKeyword_2());
		match_ExpresionAritmetica_LeftParenthesisKeyword_6_a = new TokenAlias(true, true, grammarAccess.getExpresionAritmeticaAccess().getLeftParenthesisKeyword_6());
		match_ExpresionAritmetica_RightParenthesisKeyword_4_a = new TokenAlias(true, true, grammarAccess.getExpresionAritmeticaAccess().getRightParenthesisKeyword_4());
		match_ExpresionAritmetica_RightParenthesisKeyword_8_a = new TokenAlias(true, true, grammarAccess.getExpresionAritmeticaAccess().getRightParenthesisKeyword_8());
		match_ExpresionLogica_LeftParenthesisKeyword_1_a = new TokenAlias(true, true, grammarAccess.getExpresionLogicaAccess().getLeftParenthesisKeyword_1());
		match_ExpresionLogica_LeftParenthesisKeyword_5_a = new TokenAlias(true, true, grammarAccess.getExpresionLogicaAccess().getLeftParenthesisKeyword_5());
		match_ExpresionLogica_RightParenthesisKeyword_3_a = new TokenAlias(true, true, grammarAccess.getExpresionLogicaAccess().getRightParenthesisKeyword_3());
		match_ExpresionLogica_RightParenthesisKeyword_7_a = new TokenAlias(true, true, grammarAccess.getExpresionLogicaAccess().getRightParenthesisKeyword_7());
		match_Operacion_LeftParenthesisKeyword_9_a = new TokenAlias(true, true, grammarAccess.getOperacionAccess().getLeftParenthesisKeyword_9());
		match_Operacion_ReturnKeyword_8_q = new TokenAlias(false, true, grammarAccess.getOperacionAccess().getReturnKeyword_8());
		match_Operacion_RightParenthesisKeyword_11_a = new TokenAlias(true, true, grammarAccess.getOperacionAccess().getRightParenthesisKeyword_11());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getEBooleanRule())
			return getEBooleanToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * EBoolean returns ecore::EBoolean:
	 * 	'true' | 'false';
	 */
	protected String getEBooleanToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "true";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_ExpresionAritmetica_LeftParenthesisKeyword_2_a.equals(syntax))
				emit_ExpresionAritmetica_LeftParenthesisKeyword_2_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ExpresionAritmetica_LeftParenthesisKeyword_6_a.equals(syntax))
				emit_ExpresionAritmetica_LeftParenthesisKeyword_6_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ExpresionAritmetica_RightParenthesisKeyword_4_a.equals(syntax))
				emit_ExpresionAritmetica_RightParenthesisKeyword_4_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ExpresionAritmetica_RightParenthesisKeyword_8_a.equals(syntax))
				emit_ExpresionAritmetica_RightParenthesisKeyword_8_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ExpresionLogica_LeftParenthesisKeyword_1_a.equals(syntax))
				emit_ExpresionLogica_LeftParenthesisKeyword_1_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ExpresionLogica_LeftParenthesisKeyword_5_a.equals(syntax))
				emit_ExpresionLogica_LeftParenthesisKeyword_5_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ExpresionLogica_RightParenthesisKeyword_3_a.equals(syntax))
				emit_ExpresionLogica_RightParenthesisKeyword_3_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ExpresionLogica_RightParenthesisKeyword_7_a.equals(syntax))
				emit_ExpresionLogica_RightParenthesisKeyword_7_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Operacion_LeftParenthesisKeyword_9_a.equals(syntax))
				emit_Operacion_LeftParenthesisKeyword_9_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Operacion_ReturnKeyword_8_q.equals(syntax))
				emit_Operacion_ReturnKeyword_8_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Operacion_RightParenthesisKeyword_11_a.equals(syntax))
				emit_Operacion_RightParenthesisKeyword_11_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     '('*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'ExpArit' (ambiguity) izq=Expresion
	 */
	protected void emit_ExpresionAritmetica_LeftParenthesisKeyword_2_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '('*
	 *
	 * This ambiguous syntax occurs at:
	 *     izq=Expresion ')'* (ambiguity) der=Expresion
	 *     operador=Operador (ambiguity) der=Expresion
	 */
	protected void emit_ExpresionAritmetica_LeftParenthesisKeyword_6_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ')'*
	 *
	 * This ambiguous syntax occurs at:
	 *     izq=Expresion (ambiguity) '('* der=Expresion
	 *     izq=Expresion (ambiguity) operador=Operador
	 */
	protected void emit_ExpresionAritmetica_RightParenthesisKeyword_4_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ')'*
	 *
	 * This ambiguous syntax occurs at:
	 *     der=Expresion (ambiguity) (rule end)
	 */
	protected void emit_ExpresionAritmetica_RightParenthesisKeyword_8_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '('*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'ExpLog' (ambiguity) izq=Expresion
	 */
	protected void emit_ExpresionLogica_LeftParenthesisKeyword_1_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '('*
	 *
	 * This ambiguous syntax occurs at:
	 *     izq=Expresion ')'* (ambiguity) der=Expresion
	 *     operador=OperadorLogico (ambiguity) der=Expresion
	 */
	protected void emit_ExpresionLogica_LeftParenthesisKeyword_5_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ')'*
	 *
	 * This ambiguous syntax occurs at:
	 *     izq=Expresion (ambiguity) '('* der=Expresion
	 *     izq=Expresion (ambiguity) operador=OperadorLogico
	 */
	protected void emit_ExpresionLogica_RightParenthesisKeyword_3_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ')'*
	 *
	 * This ambiguous syntax occurs at:
	 *     der=Expresion (ambiguity) (rule end)
	 */
	protected void emit_ExpresionLogica_RightParenthesisKeyword_7_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '('*
	 *
	 * This ambiguous syntax occurs at:
	 *     name=EString '(' ')' '{' 'return'? (ambiguity) ')'* '}' (rule end)
	 *     name=EString '(' ')' '{' 'return'? (ambiguity) lineas+=Linea
	 *     parametros+=Parametro ')' '{' 'return'? (ambiguity) ')'* '}' (rule end)
	 *     parametros+=Parametro ')' '{' 'return'? (ambiguity) lineas+=Linea
	 *     retorno=[TipoDato|EString] '{' 'return'? (ambiguity) ')'* '}' (rule end)
	 *     retorno=[TipoDato|EString] '{' 'return'? (ambiguity) lineas+=Linea
	 */
	protected void emit_Operacion_LeftParenthesisKeyword_9_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'return'?
	 *
	 * This ambiguous syntax occurs at:
	 *     name=EString '(' ')' '{' (ambiguity) '('* ')'* '}' (rule end)
	 *     name=EString '(' ')' '{' (ambiguity) '('* lineas+=Linea
	 *     parametros+=Parametro ')' '{' (ambiguity) '('* ')'* '}' (rule end)
	 *     parametros+=Parametro ')' '{' (ambiguity) '('* lineas+=Linea
	 *     retorno=[TipoDato|EString] '{' (ambiguity) '('* ')'* '}' (rule end)
	 *     retorno=[TipoDato|EString] '{' (ambiguity) '('* lineas+=Linea
	 */
	protected void emit_Operacion_ReturnKeyword_8_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ')'*
	 *
	 * This ambiguous syntax occurs at:
	 *     lineas+=Linea (ambiguity) '}' (rule end)
	 *     name=EString '(' ')' '{' 'return'? '('* (ambiguity) '}' (rule end)
	 *     parametros+=Parametro ')' '{' 'return'? '('* (ambiguity) '}' (rule end)
	 *     retorno=[TipoDato|EString] '{' 'return'? '('* (ambiguity) '}' (rule end)
	 */
	protected void emit_Operacion_RightParenthesisKeyword_11_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
