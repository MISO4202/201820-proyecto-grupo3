/**
 * generated by Xtext 2.12.0
 */
package org.xtext.blockchain.formatting2;

import blockchain.Aplicacion;
import blockchain.Entidad;
import blockchain.Estado;
import blockchain.Operacion;
import blockchain.SmartContract;
import blockchain.TipoDato;
import com.google.inject.Inject;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import org.xtext.blockchain.services.MyDslGrammarAccess;

@SuppressWarnings("all")
public class MyDslFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private MyDslGrammarAccess _myDslGrammarAccess;
  
  protected void _format(final Aplicacion aplicacion, @Extension final IFormattableDocument document) {
    EList<SmartContract> _smartcontract = aplicacion.getSmartcontract();
    for (final SmartContract smartContract : _smartcontract) {
      document.<SmartContract>format(smartContract);
    }
    EList<TipoDato> _tipodato = aplicacion.getTipodato();
    for (final TipoDato tipoDato : _tipodato) {
      document.<TipoDato>format(tipoDato);
    }
  }
  
  protected void _format(final SmartContract smartContract, @Extension final IFormattableDocument document) {
    EList<Entidad> _entidades = smartContract.getEntidades();
    for (final Entidad entidad : _entidades) {
      document.<Entidad>format(entidad);
    }
    EList<Estado> _estado = smartContract.getEstado();
    for (final Estado estado : _estado) {
      document.<Estado>format(estado);
    }
    EList<Operacion> _operaciones = smartContract.getOperaciones();
    for (final Operacion operacion : _operaciones) {
      document.<Operacion>format(operacion);
    }
  }
  
  public void format(final Object aplicacion, final IFormattableDocument document) {
    if (aplicacion instanceof XtextResource) {
      _format((XtextResource)aplicacion, document);
      return;
    } else if (aplicacion instanceof Aplicacion) {
      _format((Aplicacion)aplicacion, document);
      return;
    } else if (aplicacion instanceof SmartContract) {
      _format((SmartContract)aplicacion, document);
      return;
    } else if (aplicacion instanceof EObject) {
      _format((EObject)aplicacion, document);
      return;
    } else if (aplicacion == null) {
      _format((Void)null, document);
      return;
    } else if (aplicacion != null) {
      _format(aplicacion, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(aplicacion, document).toString());
    }
  }
}
